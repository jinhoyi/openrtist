// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openrtist.proto

#include "openrtist.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_openrtist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extras_ArrowKey_openrtist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openrtist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extras_IMUValue_openrtist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openrtist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extras_ScreenValue_openrtist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openrtist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extras_Setting_openrtist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openrtist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extras_StyleListEntry_DoNotUse_openrtist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openrtist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extras_TouchInput_openrtist_2eproto;
namespace openrtist {
class Extras_BytesValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extras_BytesValue> _instance;
} _Extras_BytesValue_default_instance_;
class Extras_IMUValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extras_IMUValue> _instance;
} _Extras_IMUValue_default_instance_;
class Extras_TouchInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extras_TouchInput> _instance;
} _Extras_TouchInput_default_instance_;
class Extras_ScreenValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extras_ScreenValue> _instance;
} _Extras_ScreenValue_default_instance_;
class Extras_ArrowKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extras_ArrowKey> _instance;
} _Extras_ArrowKey_default_instance_;
class Extras_SettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extras_Setting> _instance;
} _Extras_Setting_default_instance_;
class Extras_StyleListEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extras_StyleListEntry_DoNotUse> _instance;
} _Extras_StyleListEntry_DoNotUse_default_instance_;
class ExtrasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extras> _instance;
} _Extras_default_instance_;
}  // namespace openrtist
static void InitDefaultsscc_info_Extras_openrtist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openrtist::_Extras_default_instance_;
    new (ptr) ::openrtist::Extras();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openrtist::Extras::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Extras_openrtist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Extras_openrtist_2eproto}, {
      &scc_info_Extras_StyleListEntry_DoNotUse_openrtist_2eproto.base,
      &scc_info_Extras_IMUValue_openrtist_2eproto.base,
      &scc_info_Extras_ScreenValue_openrtist_2eproto.base,
      &scc_info_Extras_TouchInput_openrtist_2eproto.base,
      &scc_info_Extras_ArrowKey_openrtist_2eproto.base,
      &scc_info_Extras_Setting_openrtist_2eproto.base,}};

static void InitDefaultsscc_info_Extras_ArrowKey_openrtist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openrtist::_Extras_ArrowKey_default_instance_;
    new (ptr) ::openrtist::Extras_ArrowKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openrtist::Extras_ArrowKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extras_ArrowKey_openrtist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Extras_ArrowKey_openrtist_2eproto}, {}};

static void InitDefaultsscc_info_Extras_BytesValue_openrtist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openrtist::_Extras_BytesValue_default_instance_;
    new (ptr) ::openrtist::Extras_BytesValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openrtist::Extras_BytesValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extras_BytesValue_openrtist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Extras_BytesValue_openrtist_2eproto}, {}};

static void InitDefaultsscc_info_Extras_IMUValue_openrtist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openrtist::_Extras_IMUValue_default_instance_;
    new (ptr) ::openrtist::Extras_IMUValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openrtist::Extras_IMUValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extras_IMUValue_openrtist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Extras_IMUValue_openrtist_2eproto}, {}};

static void InitDefaultsscc_info_Extras_ScreenValue_openrtist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openrtist::_Extras_ScreenValue_default_instance_;
    new (ptr) ::openrtist::Extras_ScreenValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openrtist::Extras_ScreenValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extras_ScreenValue_openrtist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Extras_ScreenValue_openrtist_2eproto}, {}};

static void InitDefaultsscc_info_Extras_Setting_openrtist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openrtist::_Extras_Setting_default_instance_;
    new (ptr) ::openrtist::Extras_Setting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openrtist::Extras_Setting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extras_Setting_openrtist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Extras_Setting_openrtist_2eproto}, {}};

static void InitDefaultsscc_info_Extras_StyleListEntry_DoNotUse_openrtist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openrtist::_Extras_StyleListEntry_DoNotUse_default_instance_;
    new (ptr) ::openrtist::Extras_StyleListEntry_DoNotUse();
  }
  ::openrtist::Extras_StyleListEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extras_StyleListEntry_DoNotUse_openrtist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Extras_StyleListEntry_DoNotUse_openrtist_2eproto}, {}};

static void InitDefaultsscc_info_Extras_TouchInput_openrtist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openrtist::_Extras_TouchInput_default_instance_;
    new (ptr) ::openrtist::Extras_TouchInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openrtist::Extras_TouchInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extras_TouchInput_openrtist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Extras_TouchInput_openrtist_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openrtist_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_openrtist_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openrtist_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_openrtist_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_BytesValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_BytesValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_IMUValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_IMUValue, x_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_IMUValue, y_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_IMUValue, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_TouchInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_TouchInput, scale_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_TouchInput, x_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_TouchInput, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_ScreenValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_ScreenValue, height_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_ScreenValue, width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_ArrowKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_ArrowKey, left_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_ArrowKey, right_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_ArrowKey, up_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_ArrowKey, down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_Setting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_Setting, scene_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_Setting, align_center_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_Setting, ar_view_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_Setting, reset_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_Setting, pause_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_Setting, particle_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_Setting, info_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_StyleListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_StyleListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_StyleListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras_StyleListEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras, style_list_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras, imu_value_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras, screen_value_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras, touch_value_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras, arrow_key_),
  PROTOBUF_FIELD_OFFSET(::openrtist::Extras, setting_value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openrtist::Extras_BytesValue)},
  { 6, -1, sizeof(::openrtist::Extras_IMUValue)},
  { 14, -1, sizeof(::openrtist::Extras_TouchInput)},
  { 22, -1, sizeof(::openrtist::Extras_ScreenValue)},
  { 29, -1, sizeof(::openrtist::Extras_ArrowKey)},
  { 38, -1, sizeof(::openrtist::Extras_Setting)},
  { 50, 57, sizeof(::openrtist::Extras_StyleListEntry_DoNotUse)},
  { 59, -1, sizeof(::openrtist::Extras)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openrtist::_Extras_BytesValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openrtist::_Extras_IMUValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openrtist::_Extras_TouchInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openrtist::_Extras_ScreenValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openrtist::_Extras_ArrowKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openrtist::_Extras_Setting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openrtist::_Extras_StyleListEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openrtist::_Extras_default_instance_),
};

const char descriptor_table_protodef_openrtist_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017openrtist.proto\022\topenrtist\"\325\005\n\006Extras\022"
  "4\n\nstyle_list\030\001 \003(\0132 .openrtist.Extras.S"
  "tyleListEntry\022-\n\timu_value\030\002 \001(\0132\032.openr"
  "tist.Extras.IMUValue\0223\n\014screen_value\030\003 \001"
  "(\0132\035.openrtist.Extras.ScreenValue\0221\n\013tou"
  "ch_value\030\004 \001(\0132\034.openrtist.Extras.TouchI"
  "nput\022-\n\tarrow_key\030\005 \001(\0132\032.openrtist.Extr"
  "as.ArrowKey\0220\n\rsetting_value\030\006 \001(\0132\031.ope"
  "nrtist.Extras.Setting\032\033\n\nBytesValue\022\r\n\005v"
  "alue\030\001 \001(\014\032+\n\010IMUValue\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002"
  " \001(\002\022\t\n\001z\030\003 \001(\002\0321\n\nTouchInput\022\r\n\005scale\030\001"
  " \001(\002\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\032,\n\013ScreenValu"
  "e\022\016\n\006height\030\001 \001(\005\022\r\n\005width\030\002 \001(\005\032A\n\010Arro"
  "wKey\022\014\n\004left\030\001 \001(\010\022\r\n\005right\030\002 \001(\010\022\n\n\002up\030"
  "\003 \001(\010\022\014\n\004down\030\004 \001(\010\032}\n\007Setting\022\r\n\005scene\030"
  "\001 \001(\005\022\024\n\014align_center\030\002 \001(\010\022\017\n\007ar_view\030\003"
  " \001(\010\022\r\n\005reset\030\004 \001(\010\022\r\n\005pause\030\005 \001(\010\022\020\n\010pa"
  "rticle\030\006 \001(\010\022\014\n\004info\030\007 \001(\010\0320\n\016StyleListE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\036\n\024"
  "edu.cmu.cs.openrtistB\006Protosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openrtist_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_openrtist_2eproto_sccs[8] = {
  &scc_info_Extras_openrtist_2eproto.base,
  &scc_info_Extras_ArrowKey_openrtist_2eproto.base,
  &scc_info_Extras_BytesValue_openrtist_2eproto.base,
  &scc_info_Extras_IMUValue_openrtist_2eproto.base,
  &scc_info_Extras_ScreenValue_openrtist_2eproto.base,
  &scc_info_Extras_Setting_openrtist_2eproto.base,
  &scc_info_Extras_StyleListEntry_DoNotUse_openrtist_2eproto.base,
  &scc_info_Extras_TouchInput_openrtist_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openrtist_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openrtist_2eproto = {
  false, false, descriptor_table_protodef_openrtist_2eproto, "openrtist.proto", 796,
  &descriptor_table_openrtist_2eproto_once, descriptor_table_openrtist_2eproto_sccs, descriptor_table_openrtist_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_openrtist_2eproto::offsets,
  file_level_metadata_openrtist_2eproto, 8, file_level_enum_descriptors_openrtist_2eproto, file_level_service_descriptors_openrtist_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_openrtist_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_openrtist_2eproto)), true);
namespace openrtist {

// ===================================================================

void Extras_BytesValue::InitAsDefaultInstance() {
}
class Extras_BytesValue::_Internal {
 public:
};

Extras_BytesValue::Extras_BytesValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openrtist.Extras.BytesValue)
}
Extras_BytesValue::Extras_BytesValue(const Extras_BytesValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:openrtist.Extras.BytesValue)
}

void Extras_BytesValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Extras_BytesValue_openrtist_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Extras_BytesValue::~Extras_BytesValue() {
  // @@protoc_insertion_point(destructor:openrtist.Extras.BytesValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Extras_BytesValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Extras_BytesValue::ArenaDtor(void* object) {
  Extras_BytesValue* _this = reinterpret_cast< Extras_BytesValue* >(object);
  (void)_this;
}
void Extras_BytesValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extras_BytesValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extras_BytesValue& Extras_BytesValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extras_BytesValue_openrtist_2eproto.base);
  return *internal_default_instance();
}


void Extras_BytesValue::Clear() {
// @@protoc_insertion_point(message_clear_start:openrtist.Extras.BytesValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extras_BytesValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extras_BytesValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openrtist.Extras.BytesValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openrtist.Extras.BytesValue)
  return target;
}

size_t Extras_BytesValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openrtist.Extras.BytesValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extras_BytesValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openrtist.Extras.BytesValue)
  GOOGLE_DCHECK_NE(&from, this);
  const Extras_BytesValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extras_BytesValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openrtist.Extras.BytesValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openrtist.Extras.BytesValue)
    MergeFrom(*source);
  }
}

void Extras_BytesValue::MergeFrom(const Extras_BytesValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openrtist.Extras.BytesValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void Extras_BytesValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openrtist.Extras.BytesValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extras_BytesValue::CopyFrom(const Extras_BytesValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openrtist.Extras.BytesValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extras_BytesValue::IsInitialized() const {
  return true;
}

void Extras_BytesValue::InternalSwap(Extras_BytesValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Extras_BytesValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Extras_IMUValue::InitAsDefaultInstance() {
}
class Extras_IMUValue::_Internal {
 public:
};

Extras_IMUValue::Extras_IMUValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openrtist.Extras.IMUValue)
}
Extras_IMUValue::Extras_IMUValue(const Extras_IMUValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:openrtist.Extras.IMUValue)
}

void Extras_IMUValue::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Extras_IMUValue::~Extras_IMUValue() {
  // @@protoc_insertion_point(destructor:openrtist.Extras.IMUValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Extras_IMUValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Extras_IMUValue::ArenaDtor(void* object) {
  Extras_IMUValue* _this = reinterpret_cast< Extras_IMUValue* >(object);
  (void)_this;
}
void Extras_IMUValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extras_IMUValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extras_IMUValue& Extras_IMUValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extras_IMUValue_openrtist_2eproto.base);
  return *internal_default_instance();
}


void Extras_IMUValue::Clear() {
// @@protoc_insertion_point(message_clear_start:openrtist.Extras.IMUValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extras_IMUValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extras_IMUValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openrtist.Extras.IMUValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openrtist.Extras.IMUValue)
  return target;
}

size_t Extras_IMUValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openrtist.Extras.IMUValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extras_IMUValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openrtist.Extras.IMUValue)
  GOOGLE_DCHECK_NE(&from, this);
  const Extras_IMUValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extras_IMUValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openrtist.Extras.IMUValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openrtist.Extras.IMUValue)
    MergeFrom(*source);
  }
}

void Extras_IMUValue::MergeFrom(const Extras_IMUValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openrtist.Extras.IMUValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Extras_IMUValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openrtist.Extras.IMUValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extras_IMUValue::CopyFrom(const Extras_IMUValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openrtist.Extras.IMUValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extras_IMUValue::IsInitialized() const {
  return true;
}

void Extras_IMUValue::InternalSwap(Extras_IMUValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Extras_IMUValue, z_)
      + sizeof(Extras_IMUValue::z_)
      - PROTOBUF_FIELD_OFFSET(Extras_IMUValue, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Extras_IMUValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Extras_TouchInput::InitAsDefaultInstance() {
}
class Extras_TouchInput::_Internal {
 public:
};

Extras_TouchInput::Extras_TouchInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openrtist.Extras.TouchInput)
}
Extras_TouchInput::Extras_TouchInput(const Extras_TouchInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scale_, &from.scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&scale_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:openrtist.Extras.TouchInput)
}

void Extras_TouchInput::SharedCtor() {
  ::memset(&scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(y_));
}

Extras_TouchInput::~Extras_TouchInput() {
  // @@protoc_insertion_point(destructor:openrtist.Extras.TouchInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Extras_TouchInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Extras_TouchInput::ArenaDtor(void* object) {
  Extras_TouchInput* _this = reinterpret_cast< Extras_TouchInput* >(object);
  (void)_this;
}
void Extras_TouchInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extras_TouchInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extras_TouchInput& Extras_TouchInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extras_TouchInput_openrtist_2eproto.base);
  return *internal_default_instance();
}


void Extras_TouchInput::Clear() {
// @@protoc_insertion_point(message_clear_start:openrtist.Extras.TouchInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extras_TouchInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extras_TouchInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openrtist.Extras.TouchInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float scale = 1;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_scale(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openrtist.Extras.TouchInput)
  return target;
}

size_t Extras_TouchInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openrtist.Extras.TouchInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float scale = 1;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 1 + 4;
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extras_TouchInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openrtist.Extras.TouchInput)
  GOOGLE_DCHECK_NE(&from, this);
  const Extras_TouchInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extras_TouchInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openrtist.Extras.TouchInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openrtist.Extras.TouchInput)
    MergeFrom(*source);
  }
}

void Extras_TouchInput::MergeFrom(const Extras_TouchInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openrtist.Extras.TouchInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    _internal_set_scale(from._internal_scale());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Extras_TouchInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openrtist.Extras.TouchInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extras_TouchInput::CopyFrom(const Extras_TouchInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openrtist.Extras.TouchInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extras_TouchInput::IsInitialized() const {
  return true;
}

void Extras_TouchInput::InternalSwap(Extras_TouchInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Extras_TouchInput, y_)
      + sizeof(Extras_TouchInput::y_)
      - PROTOBUF_FIELD_OFFSET(Extras_TouchInput, scale_)>(
          reinterpret_cast<char*>(&scale_),
          reinterpret_cast<char*>(&other->scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Extras_TouchInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Extras_ScreenValue::InitAsDefaultInstance() {
}
class Extras_ScreenValue::_Internal {
 public:
};

Extras_ScreenValue::Extras_ScreenValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openrtist.Extras.ScreenValue)
}
Extras_ScreenValue::Extras_ScreenValue(const Extras_ScreenValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&height_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:openrtist.Extras.ScreenValue)
}

void Extras_ScreenValue::SharedCtor() {
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&height_)) + sizeof(width_));
}

Extras_ScreenValue::~Extras_ScreenValue() {
  // @@protoc_insertion_point(destructor:openrtist.Extras.ScreenValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Extras_ScreenValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Extras_ScreenValue::ArenaDtor(void* object) {
  Extras_ScreenValue* _this = reinterpret_cast< Extras_ScreenValue* >(object);
  (void)_this;
}
void Extras_ScreenValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extras_ScreenValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extras_ScreenValue& Extras_ScreenValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extras_ScreenValue_openrtist_2eproto.base);
  return *internal_default_instance();
}


void Extras_ScreenValue::Clear() {
// @@protoc_insertion_point(message_clear_start:openrtist.Extras.ScreenValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&height_)) + sizeof(width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extras_ScreenValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extras_ScreenValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openrtist.Extras.ScreenValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_height(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openrtist.Extras.ScreenValue)
  return target;
}

size_t Extras_ScreenValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openrtist.Extras.ScreenValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extras_ScreenValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openrtist.Extras.ScreenValue)
  GOOGLE_DCHECK_NE(&from, this);
  const Extras_ScreenValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extras_ScreenValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openrtist.Extras.ScreenValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openrtist.Extras.ScreenValue)
    MergeFrom(*source);
  }
}

void Extras_ScreenValue::MergeFrom(const Extras_ScreenValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openrtist.Extras.ScreenValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
}

void Extras_ScreenValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openrtist.Extras.ScreenValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extras_ScreenValue::CopyFrom(const Extras_ScreenValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openrtist.Extras.ScreenValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extras_ScreenValue::IsInitialized() const {
  return true;
}

void Extras_ScreenValue::InternalSwap(Extras_ScreenValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Extras_ScreenValue, width_)
      + sizeof(Extras_ScreenValue::width_)
      - PROTOBUF_FIELD_OFFSET(Extras_ScreenValue, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Extras_ScreenValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Extras_ArrowKey::InitAsDefaultInstance() {
}
class Extras_ArrowKey::_Internal {
 public:
};

Extras_ArrowKey::Extras_ArrowKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openrtist.Extras.ArrowKey)
}
Extras_ArrowKey::Extras_ArrowKey(const Extras_ArrowKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&left_)) + sizeof(down_));
  // @@protoc_insertion_point(copy_constructor:openrtist.Extras.ArrowKey)
}

void Extras_ArrowKey::SharedCtor() {
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&left_)) + sizeof(down_));
}

Extras_ArrowKey::~Extras_ArrowKey() {
  // @@protoc_insertion_point(destructor:openrtist.Extras.ArrowKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Extras_ArrowKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Extras_ArrowKey::ArenaDtor(void* object) {
  Extras_ArrowKey* _this = reinterpret_cast< Extras_ArrowKey* >(object);
  (void)_this;
}
void Extras_ArrowKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extras_ArrowKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extras_ArrowKey& Extras_ArrowKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extras_ArrowKey_openrtist_2eproto.base);
  return *internal_default_instance();
}


void Extras_ArrowKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openrtist.Extras.ArrowKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&left_)) + sizeof(down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extras_ArrowKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool up = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool down = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extras_ArrowKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openrtist.Extras.ArrowKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool left = 1;
  if (this->left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_left(), target);
  }

  // bool right = 2;
  if (this->right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_right(), target);
  }

  // bool up = 3;
  if (this->up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_up(), target);
  }

  // bool down = 4;
  if (this->down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openrtist.Extras.ArrowKey)
  return target;
}

size_t Extras_ArrowKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openrtist.Extras.ArrowKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool left = 1;
  if (this->left() != 0) {
    total_size += 1 + 1;
  }

  // bool right = 2;
  if (this->right() != 0) {
    total_size += 1 + 1;
  }

  // bool up = 3;
  if (this->up() != 0) {
    total_size += 1 + 1;
  }

  // bool down = 4;
  if (this->down() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extras_ArrowKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openrtist.Extras.ArrowKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Extras_ArrowKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extras_ArrowKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openrtist.Extras.ArrowKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openrtist.Extras.ArrowKey)
    MergeFrom(*source);
  }
}

void Extras_ArrowKey::MergeFrom(const Extras_ArrowKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openrtist.Extras.ArrowKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left() != 0) {
    _internal_set_left(from._internal_left());
  }
  if (from.right() != 0) {
    _internal_set_right(from._internal_right());
  }
  if (from.up() != 0) {
    _internal_set_up(from._internal_up());
  }
  if (from.down() != 0) {
    _internal_set_down(from._internal_down());
  }
}

void Extras_ArrowKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openrtist.Extras.ArrowKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extras_ArrowKey::CopyFrom(const Extras_ArrowKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openrtist.Extras.ArrowKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extras_ArrowKey::IsInitialized() const {
  return true;
}

void Extras_ArrowKey::InternalSwap(Extras_ArrowKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Extras_ArrowKey, down_)
      + sizeof(Extras_ArrowKey::down_)
      - PROTOBUF_FIELD_OFFSET(Extras_ArrowKey, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Extras_ArrowKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Extras_Setting::InitAsDefaultInstance() {
}
class Extras_Setting::_Internal {
 public:
};

Extras_Setting::Extras_Setting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openrtist.Extras.Setting)
}
Extras_Setting::Extras_Setting(const Extras_Setting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scene_, &from.scene_,
    static_cast<size_t>(reinterpret_cast<char*>(&info_) -
    reinterpret_cast<char*>(&scene_)) + sizeof(info_));
  // @@protoc_insertion_point(copy_constructor:openrtist.Extras.Setting)
}

void Extras_Setting::SharedCtor() {
  ::memset(&scene_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&info_) -
      reinterpret_cast<char*>(&scene_)) + sizeof(info_));
}

Extras_Setting::~Extras_Setting() {
  // @@protoc_insertion_point(destructor:openrtist.Extras.Setting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Extras_Setting::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Extras_Setting::ArenaDtor(void* object) {
  Extras_Setting* _this = reinterpret_cast< Extras_Setting* >(object);
  (void)_this;
}
void Extras_Setting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extras_Setting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extras_Setting& Extras_Setting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extras_Setting_openrtist_2eproto.base);
  return *internal_default_instance();
}


void Extras_Setting::Clear() {
// @@protoc_insertion_point(message_clear_start:openrtist.Extras.Setting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scene_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&info_) -
      reinterpret_cast<char*>(&scene_)) + sizeof(info_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extras_Setting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 scene = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool align_center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          align_center_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ar_view = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ar_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pause = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool particle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          particle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extras_Setting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openrtist.Extras.Setting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scene = 1;
  if (this->scene() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_scene(), target);
  }

  // bool align_center = 2;
  if (this->align_center() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_align_center(), target);
  }

  // bool ar_view = 3;
  if (this->ar_view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ar_view(), target);
  }

  // bool reset = 4;
  if (this->reset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_reset(), target);
  }

  // bool pause = 5;
  if (this->pause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_pause(), target);
  }

  // bool particle = 6;
  if (this->particle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_particle(), target);
  }

  // bool info = 7;
  if (this->info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openrtist.Extras.Setting)
  return target;
}

size_t Extras_Setting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openrtist.Extras.Setting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 scene = 1;
  if (this->scene() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene());
  }

  // bool align_center = 2;
  if (this->align_center() != 0) {
    total_size += 1 + 1;
  }

  // bool ar_view = 3;
  if (this->ar_view() != 0) {
    total_size += 1 + 1;
  }

  // bool reset = 4;
  if (this->reset() != 0) {
    total_size += 1 + 1;
  }

  // bool pause = 5;
  if (this->pause() != 0) {
    total_size += 1 + 1;
  }

  // bool particle = 6;
  if (this->particle() != 0) {
    total_size += 1 + 1;
  }

  // bool info = 7;
  if (this->info() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extras_Setting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openrtist.Extras.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  const Extras_Setting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extras_Setting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openrtist.Extras.Setting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openrtist.Extras.Setting)
    MergeFrom(*source);
  }
}

void Extras_Setting::MergeFrom(const Extras_Setting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openrtist.Extras.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene() != 0) {
    _internal_set_scene(from._internal_scene());
  }
  if (from.align_center() != 0) {
    _internal_set_align_center(from._internal_align_center());
  }
  if (from.ar_view() != 0) {
    _internal_set_ar_view(from._internal_ar_view());
  }
  if (from.reset() != 0) {
    _internal_set_reset(from._internal_reset());
  }
  if (from.pause() != 0) {
    _internal_set_pause(from._internal_pause());
  }
  if (from.particle() != 0) {
    _internal_set_particle(from._internal_particle());
  }
  if (from.info() != 0) {
    _internal_set_info(from._internal_info());
  }
}

void Extras_Setting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openrtist.Extras.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extras_Setting::CopyFrom(const Extras_Setting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openrtist.Extras.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extras_Setting::IsInitialized() const {
  return true;
}

void Extras_Setting::InternalSwap(Extras_Setting* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Extras_Setting, info_)
      + sizeof(Extras_Setting::info_)
      - PROTOBUF_FIELD_OFFSET(Extras_Setting, scene_)>(
          reinterpret_cast<char*>(&scene_),
          reinterpret_cast<char*>(&other->scene_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Extras_Setting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Extras_StyleListEntry_DoNotUse::Extras_StyleListEntry_DoNotUse() {}
Extras_StyleListEntry_DoNotUse::Extras_StyleListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Extras_StyleListEntry_DoNotUse::MergeFrom(const Extras_StyleListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Extras_StyleListEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Extras_StyleListEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Extras::InitAsDefaultInstance() {
  ::openrtist::_Extras_default_instance_._instance.get_mutable()->imu_value_ = const_cast< ::openrtist::Extras_IMUValue*>(
      ::openrtist::Extras_IMUValue::internal_default_instance());
  ::openrtist::_Extras_default_instance_._instance.get_mutable()->screen_value_ = const_cast< ::openrtist::Extras_ScreenValue*>(
      ::openrtist::Extras_ScreenValue::internal_default_instance());
  ::openrtist::_Extras_default_instance_._instance.get_mutable()->touch_value_ = const_cast< ::openrtist::Extras_TouchInput*>(
      ::openrtist::Extras_TouchInput::internal_default_instance());
  ::openrtist::_Extras_default_instance_._instance.get_mutable()->arrow_key_ = const_cast< ::openrtist::Extras_ArrowKey*>(
      ::openrtist::Extras_ArrowKey::internal_default_instance());
  ::openrtist::_Extras_default_instance_._instance.get_mutable()->setting_value_ = const_cast< ::openrtist::Extras_Setting*>(
      ::openrtist::Extras_Setting::internal_default_instance());
}
class Extras::_Internal {
 public:
  static const ::openrtist::Extras_IMUValue& imu_value(const Extras* msg);
  static const ::openrtist::Extras_ScreenValue& screen_value(const Extras* msg);
  static const ::openrtist::Extras_TouchInput& touch_value(const Extras* msg);
  static const ::openrtist::Extras_ArrowKey& arrow_key(const Extras* msg);
  static const ::openrtist::Extras_Setting& setting_value(const Extras* msg);
};

const ::openrtist::Extras_IMUValue&
Extras::_Internal::imu_value(const Extras* msg) {
  return *msg->imu_value_;
}
const ::openrtist::Extras_ScreenValue&
Extras::_Internal::screen_value(const Extras* msg) {
  return *msg->screen_value_;
}
const ::openrtist::Extras_TouchInput&
Extras::_Internal::touch_value(const Extras* msg) {
  return *msg->touch_value_;
}
const ::openrtist::Extras_ArrowKey&
Extras::_Internal::arrow_key(const Extras* msg) {
  return *msg->arrow_key_;
}
const ::openrtist::Extras_Setting&
Extras::_Internal::setting_value(const Extras* msg) {
  return *msg->setting_value_;
}
Extras::Extras(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  style_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openrtist.Extras)
}
Extras::Extras(const Extras& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  style_list_.MergeFrom(from.style_list_);
  if (from._internal_has_imu_value()) {
    imu_value_ = new ::openrtist::Extras_IMUValue(*from.imu_value_);
  } else {
    imu_value_ = nullptr;
  }
  if (from._internal_has_screen_value()) {
    screen_value_ = new ::openrtist::Extras_ScreenValue(*from.screen_value_);
  } else {
    screen_value_ = nullptr;
  }
  if (from._internal_has_touch_value()) {
    touch_value_ = new ::openrtist::Extras_TouchInput(*from.touch_value_);
  } else {
    touch_value_ = nullptr;
  }
  if (from._internal_has_arrow_key()) {
    arrow_key_ = new ::openrtist::Extras_ArrowKey(*from.arrow_key_);
  } else {
    arrow_key_ = nullptr;
  }
  if (from._internal_has_setting_value()) {
    setting_value_ = new ::openrtist::Extras_Setting(*from.setting_value_);
  } else {
    setting_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openrtist.Extras)
}

void Extras::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Extras_openrtist_2eproto.base);
  ::memset(&imu_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setting_value_) -
      reinterpret_cast<char*>(&imu_value_)) + sizeof(setting_value_));
}

Extras::~Extras() {
  // @@protoc_insertion_point(destructor:openrtist.Extras)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Extras::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete imu_value_;
  if (this != internal_default_instance()) delete screen_value_;
  if (this != internal_default_instance()) delete touch_value_;
  if (this != internal_default_instance()) delete arrow_key_;
  if (this != internal_default_instance()) delete setting_value_;
}

void Extras::ArenaDtor(void* object) {
  Extras* _this = reinterpret_cast< Extras* >(object);
  (void)_this;
}
void Extras::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extras::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extras& Extras::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extras_openrtist_2eproto.base);
  return *internal_default_instance();
}


void Extras::Clear() {
// @@protoc_insertion_point(message_clear_start:openrtist.Extras)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  style_list_.Clear();
  if (GetArena() == nullptr && imu_value_ != nullptr) {
    delete imu_value_;
  }
  imu_value_ = nullptr;
  if (GetArena() == nullptr && screen_value_ != nullptr) {
    delete screen_value_;
  }
  screen_value_ = nullptr;
  if (GetArena() == nullptr && touch_value_ != nullptr) {
    delete touch_value_;
  }
  touch_value_ = nullptr;
  if (GetArena() == nullptr && arrow_key_ != nullptr) {
    delete arrow_key_;
  }
  arrow_key_ = nullptr;
  if (GetArena() == nullptr && setting_value_ != nullptr) {
    delete setting_value_;
  }
  setting_value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extras::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> style_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&style_list_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .openrtist.Extras.IMUValue imu_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openrtist.Extras.ScreenValue screen_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_screen_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openrtist.Extras.TouchInput touch_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_touch_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openrtist.Extras.ArrowKey arrow_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrow_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openrtist.Extras.Setting setting_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_setting_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extras::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openrtist.Extras)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> style_list = 1;
  if (!this->_internal_style_list().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "openrtist.Extras.StyleListEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "openrtist.Extras.StyleListEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_style_list().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_style_list().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_style_list().begin();
          it != this->_internal_style_list().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Extras_StyleListEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_style_list().begin();
          it != this->_internal_style_list().end(); ++it) {
        target = Extras_StyleListEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .openrtist.Extras.IMUValue imu_value = 2;
  if (this->has_imu_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::imu_value(this), target, stream);
  }

  // .openrtist.Extras.ScreenValue screen_value = 3;
  if (this->has_screen_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::screen_value(this), target, stream);
  }

  // .openrtist.Extras.TouchInput touch_value = 4;
  if (this->has_touch_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::touch_value(this), target, stream);
  }

  // .openrtist.Extras.ArrowKey arrow_key = 5;
  if (this->has_arrow_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::arrow_key(this), target, stream);
  }

  // .openrtist.Extras.Setting setting_value = 6;
  if (this->has_setting_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::setting_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openrtist.Extras)
  return target;
}

size_t Extras::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openrtist.Extras)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> style_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_style_list_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_style_list().begin();
      it != this->_internal_style_list().end(); ++it) {
    total_size += Extras_StyleListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .openrtist.Extras.IMUValue imu_value = 2;
  if (this->has_imu_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_value_);
  }

  // .openrtist.Extras.ScreenValue screen_value = 3;
  if (this->has_screen_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *screen_value_);
  }

  // .openrtist.Extras.TouchInput touch_value = 4;
  if (this->has_touch_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *touch_value_);
  }

  // .openrtist.Extras.ArrowKey arrow_key = 5;
  if (this->has_arrow_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arrow_key_);
  }

  // .openrtist.Extras.Setting setting_value = 6;
  if (this->has_setting_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extras::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openrtist.Extras)
  GOOGLE_DCHECK_NE(&from, this);
  const Extras* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extras>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openrtist.Extras)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openrtist.Extras)
    MergeFrom(*source);
  }
}

void Extras::MergeFrom(const Extras& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openrtist.Extras)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  style_list_.MergeFrom(from.style_list_);
  if (from.has_imu_value()) {
    _internal_mutable_imu_value()->::openrtist::Extras_IMUValue::MergeFrom(from._internal_imu_value());
  }
  if (from.has_screen_value()) {
    _internal_mutable_screen_value()->::openrtist::Extras_ScreenValue::MergeFrom(from._internal_screen_value());
  }
  if (from.has_touch_value()) {
    _internal_mutable_touch_value()->::openrtist::Extras_TouchInput::MergeFrom(from._internal_touch_value());
  }
  if (from.has_arrow_key()) {
    _internal_mutable_arrow_key()->::openrtist::Extras_ArrowKey::MergeFrom(from._internal_arrow_key());
  }
  if (from.has_setting_value()) {
    _internal_mutable_setting_value()->::openrtist::Extras_Setting::MergeFrom(from._internal_setting_value());
  }
}

void Extras::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openrtist.Extras)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extras::CopyFrom(const Extras& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openrtist.Extras)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extras::IsInitialized() const {
  return true;
}

void Extras::InternalSwap(Extras* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  style_list_.Swap(&other->style_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Extras, setting_value_)
      + sizeof(Extras::setting_value_)
      - PROTOBUF_FIELD_OFFSET(Extras, imu_value_)>(
          reinterpret_cast<char*>(&imu_value_),
          reinterpret_cast<char*>(&other->imu_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Extras::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace openrtist
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openrtist::Extras_BytesValue* Arena::CreateMaybeMessage< ::openrtist::Extras_BytesValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openrtist::Extras_BytesValue >(arena);
}
template<> PROTOBUF_NOINLINE ::openrtist::Extras_IMUValue* Arena::CreateMaybeMessage< ::openrtist::Extras_IMUValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openrtist::Extras_IMUValue >(arena);
}
template<> PROTOBUF_NOINLINE ::openrtist::Extras_TouchInput* Arena::CreateMaybeMessage< ::openrtist::Extras_TouchInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openrtist::Extras_TouchInput >(arena);
}
template<> PROTOBUF_NOINLINE ::openrtist::Extras_ScreenValue* Arena::CreateMaybeMessage< ::openrtist::Extras_ScreenValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openrtist::Extras_ScreenValue >(arena);
}
template<> PROTOBUF_NOINLINE ::openrtist::Extras_ArrowKey* Arena::CreateMaybeMessage< ::openrtist::Extras_ArrowKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openrtist::Extras_ArrowKey >(arena);
}
template<> PROTOBUF_NOINLINE ::openrtist::Extras_Setting* Arena::CreateMaybeMessage< ::openrtist::Extras_Setting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openrtist::Extras_Setting >(arena);
}
template<> PROTOBUF_NOINLINE ::openrtist::Extras_StyleListEntry_DoNotUse* Arena::CreateMaybeMessage< ::openrtist::Extras_StyleListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openrtist::Extras_StyleListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::openrtist::Extras* Arena::CreateMaybeMessage< ::openrtist::Extras >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openrtist::Extras >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
