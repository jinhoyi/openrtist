// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openrtist.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openrtist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openrtist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openrtist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openrtist_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openrtist_2eproto;
namespace openrtist {
class Extras;
class ExtrasDefaultTypeInternal;
extern ExtrasDefaultTypeInternal _Extras_default_instance_;
class Extras_BytesValue;
class Extras_BytesValueDefaultTypeInternal;
extern Extras_BytesValueDefaultTypeInternal _Extras_BytesValue_default_instance_;
class Extras_IMUValue;
class Extras_IMUValueDefaultTypeInternal;
extern Extras_IMUValueDefaultTypeInternal _Extras_IMUValue_default_instance_;
class Extras_ScreenValue;
class Extras_ScreenValueDefaultTypeInternal;
extern Extras_ScreenValueDefaultTypeInternal _Extras_ScreenValue_default_instance_;
class Extras_StyleListEntry_DoNotUse;
class Extras_StyleListEntry_DoNotUseDefaultTypeInternal;
extern Extras_StyleListEntry_DoNotUseDefaultTypeInternal _Extras_StyleListEntry_DoNotUse_default_instance_;
class Extras_TouchInput;
class Extras_TouchInputDefaultTypeInternal;
extern Extras_TouchInputDefaultTypeInternal _Extras_TouchInput_default_instance_;
}  // namespace openrtist
PROTOBUF_NAMESPACE_OPEN
template<> ::openrtist::Extras* Arena::CreateMaybeMessage<::openrtist::Extras>(Arena*);
template<> ::openrtist::Extras_BytesValue* Arena::CreateMaybeMessage<::openrtist::Extras_BytesValue>(Arena*);
template<> ::openrtist::Extras_IMUValue* Arena::CreateMaybeMessage<::openrtist::Extras_IMUValue>(Arena*);
template<> ::openrtist::Extras_ScreenValue* Arena::CreateMaybeMessage<::openrtist::Extras_ScreenValue>(Arena*);
template<> ::openrtist::Extras_StyleListEntry_DoNotUse* Arena::CreateMaybeMessage<::openrtist::Extras_StyleListEntry_DoNotUse>(Arena*);
template<> ::openrtist::Extras_TouchInput* Arena::CreateMaybeMessage<::openrtist::Extras_TouchInput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openrtist {

// ===================================================================

class Extras_BytesValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openrtist.Extras.BytesValue) */ {
 public:
  inline Extras_BytesValue() : Extras_BytesValue(nullptr) {};
  virtual ~Extras_BytesValue();

  Extras_BytesValue(const Extras_BytesValue& from);
  Extras_BytesValue(Extras_BytesValue&& from) noexcept
    : Extras_BytesValue() {
    *this = ::std::move(from);
  }

  inline Extras_BytesValue& operator=(const Extras_BytesValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extras_BytesValue& operator=(Extras_BytesValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Extras_BytesValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extras_BytesValue* internal_default_instance() {
    return reinterpret_cast<const Extras_BytesValue*>(
               &_Extras_BytesValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Extras_BytesValue& a, Extras_BytesValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Extras_BytesValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extras_BytesValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extras_BytesValue* New() const final {
    return CreateMaybeMessage<Extras_BytesValue>(nullptr);
  }

  Extras_BytesValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extras_BytesValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extras_BytesValue& from);
  void MergeFrom(const Extras_BytesValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extras_BytesValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openrtist.Extras.BytesValue";
  }
  protected:
  explicit Extras_BytesValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openrtist_2eproto);
    return ::descriptor_table_openrtist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:openrtist.Extras.BytesValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openrtist_2eproto;
};
// -------------------------------------------------------------------

class Extras_IMUValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openrtist.Extras.IMUValue) */ {
 public:
  inline Extras_IMUValue() : Extras_IMUValue(nullptr) {};
  virtual ~Extras_IMUValue();

  Extras_IMUValue(const Extras_IMUValue& from);
  Extras_IMUValue(Extras_IMUValue&& from) noexcept
    : Extras_IMUValue() {
    *this = ::std::move(from);
  }

  inline Extras_IMUValue& operator=(const Extras_IMUValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extras_IMUValue& operator=(Extras_IMUValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Extras_IMUValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extras_IMUValue* internal_default_instance() {
    return reinterpret_cast<const Extras_IMUValue*>(
               &_Extras_IMUValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Extras_IMUValue& a, Extras_IMUValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Extras_IMUValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extras_IMUValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extras_IMUValue* New() const final {
    return CreateMaybeMessage<Extras_IMUValue>(nullptr);
  }

  Extras_IMUValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extras_IMUValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extras_IMUValue& from);
  void MergeFrom(const Extras_IMUValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extras_IMUValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openrtist.Extras.IMUValue";
  }
  protected:
  explicit Extras_IMUValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openrtist_2eproto);
    return ::descriptor_table_openrtist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:openrtist.Extras.IMUValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openrtist_2eproto;
};
// -------------------------------------------------------------------

class Extras_TouchInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openrtist.Extras.TouchInput) */ {
 public:
  inline Extras_TouchInput() : Extras_TouchInput(nullptr) {};
  virtual ~Extras_TouchInput();

  Extras_TouchInput(const Extras_TouchInput& from);
  Extras_TouchInput(Extras_TouchInput&& from) noexcept
    : Extras_TouchInput() {
    *this = ::std::move(from);
  }

  inline Extras_TouchInput& operator=(const Extras_TouchInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extras_TouchInput& operator=(Extras_TouchInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Extras_TouchInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extras_TouchInput* internal_default_instance() {
    return reinterpret_cast<const Extras_TouchInput*>(
               &_Extras_TouchInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Extras_TouchInput& a, Extras_TouchInput& b) {
    a.Swap(&b);
  }
  inline void Swap(Extras_TouchInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extras_TouchInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extras_TouchInput* New() const final {
    return CreateMaybeMessage<Extras_TouchInput>(nullptr);
  }

  Extras_TouchInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extras_TouchInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extras_TouchInput& from);
  void MergeFrom(const Extras_TouchInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extras_TouchInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openrtist.Extras.TouchInput";
  }
  protected:
  explicit Extras_TouchInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openrtist_2eproto);
    return ::descriptor_table_openrtist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // float scale = 1;
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:openrtist.Extras.TouchInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float scale_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openrtist_2eproto;
};
// -------------------------------------------------------------------

class Extras_ScreenValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openrtist.Extras.ScreenValue) */ {
 public:
  inline Extras_ScreenValue() : Extras_ScreenValue(nullptr) {};
  virtual ~Extras_ScreenValue();

  Extras_ScreenValue(const Extras_ScreenValue& from);
  Extras_ScreenValue(Extras_ScreenValue&& from) noexcept
    : Extras_ScreenValue() {
    *this = ::std::move(from);
  }

  inline Extras_ScreenValue& operator=(const Extras_ScreenValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extras_ScreenValue& operator=(Extras_ScreenValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Extras_ScreenValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extras_ScreenValue* internal_default_instance() {
    return reinterpret_cast<const Extras_ScreenValue*>(
               &_Extras_ScreenValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Extras_ScreenValue& a, Extras_ScreenValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Extras_ScreenValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extras_ScreenValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extras_ScreenValue* New() const final {
    return CreateMaybeMessage<Extras_ScreenValue>(nullptr);
  }

  Extras_ScreenValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extras_ScreenValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extras_ScreenValue& from);
  void MergeFrom(const Extras_ScreenValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extras_ScreenValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openrtist.Extras.ScreenValue";
  }
  protected:
  explicit Extras_ScreenValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openrtist_2eproto);
    return ::descriptor_table_openrtist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
  };
  // int32 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:openrtist.Extras.ScreenValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openrtist_2eproto;
};
// -------------------------------------------------------------------

class Extras_StyleListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Extras_StyleListEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Extras_StyleListEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Extras_StyleListEntry_DoNotUse();
  Extras_StyleListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Extras_StyleListEntry_DoNotUse& other);
  static const Extras_StyleListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Extras_StyleListEntry_DoNotUse*>(&_Extras_StyleListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "openrtist.Extras.StyleListEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "openrtist.Extras.StyleListEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openrtist_2eproto);
    return ::descriptor_table_openrtist_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class Extras PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openrtist.Extras) */ {
 public:
  inline Extras() : Extras(nullptr) {};
  virtual ~Extras();

  Extras(const Extras& from);
  Extras(Extras&& from) noexcept
    : Extras() {
    *this = ::std::move(from);
  }

  inline Extras& operator=(const Extras& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extras& operator=(Extras&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Extras& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extras* internal_default_instance() {
    return reinterpret_cast<const Extras*>(
               &_Extras_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Extras& a, Extras& b) {
    a.Swap(&b);
  }
  inline void Swap(Extras* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extras* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extras* New() const final {
    return CreateMaybeMessage<Extras>(nullptr);
  }

  Extras* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extras>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extras& from);
  void MergeFrom(const Extras& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extras* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openrtist.Extras";
  }
  protected:
  explicit Extras(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openrtist_2eproto);
    return ::descriptor_table_openrtist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Extras_BytesValue BytesValue;
  typedef Extras_IMUValue IMUValue;
  typedef Extras_TouchInput TouchInput;
  typedef Extras_ScreenValue ScreenValue;

  // accessors -------------------------------------------------------

  enum : int {
    kStyleListFieldNumber = 2,
    kStyleFieldNumber = 1,
    kStyleImageFieldNumber = 3,
    kDepthMapFieldNumber = 5,
    kImuValueFieldNumber = 6,
    kScreenValueFieldNumber = 7,
    kTouchValueFieldNumber = 8,
    kDepthThresholdFieldNumber = 4,
  };
  // map<string, string> style_list = 2;
  int style_list_size() const;
  private:
  int _internal_style_list_size() const;
  public:
  void clear_style_list();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_style_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_style_list();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      style_list() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_style_list();

  // string style = 1;
  void clear_style();
  const std::string& style() const;
  void set_style(const std::string& value);
  void set_style(std::string&& value);
  void set_style(const char* value);
  void set_style(const char* value, size_t size);
  std::string* mutable_style();
  std::string* release_style();
  void set_allocated_style(std::string* style);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_style();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_style(
      std::string* style);
  private:
  const std::string& _internal_style() const;
  void _internal_set_style(const std::string& value);
  std::string* _internal_mutable_style();
  public:

  // .openrtist.Extras.BytesValue style_image = 3;
  bool has_style_image() const;
  private:
  bool _internal_has_style_image() const;
  public:
  void clear_style_image();
  const ::openrtist::Extras_BytesValue& style_image() const;
  ::openrtist::Extras_BytesValue* release_style_image();
  ::openrtist::Extras_BytesValue* mutable_style_image();
  void set_allocated_style_image(::openrtist::Extras_BytesValue* style_image);
  private:
  const ::openrtist::Extras_BytesValue& _internal_style_image() const;
  ::openrtist::Extras_BytesValue* _internal_mutable_style_image();
  public:
  void unsafe_arena_set_allocated_style_image(
      ::openrtist::Extras_BytesValue* style_image);
  ::openrtist::Extras_BytesValue* unsafe_arena_release_style_image();

  // .openrtist.Extras.BytesValue depth_map = 5;
  bool has_depth_map() const;
  private:
  bool _internal_has_depth_map() const;
  public:
  void clear_depth_map();
  const ::openrtist::Extras_BytesValue& depth_map() const;
  ::openrtist::Extras_BytesValue* release_depth_map();
  ::openrtist::Extras_BytesValue* mutable_depth_map();
  void set_allocated_depth_map(::openrtist::Extras_BytesValue* depth_map);
  private:
  const ::openrtist::Extras_BytesValue& _internal_depth_map() const;
  ::openrtist::Extras_BytesValue* _internal_mutable_depth_map();
  public:
  void unsafe_arena_set_allocated_depth_map(
      ::openrtist::Extras_BytesValue* depth_map);
  ::openrtist::Extras_BytesValue* unsafe_arena_release_depth_map();

  // .openrtist.Extras.IMUValue imu_value = 6;
  bool has_imu_value() const;
  private:
  bool _internal_has_imu_value() const;
  public:
  void clear_imu_value();
  const ::openrtist::Extras_IMUValue& imu_value() const;
  ::openrtist::Extras_IMUValue* release_imu_value();
  ::openrtist::Extras_IMUValue* mutable_imu_value();
  void set_allocated_imu_value(::openrtist::Extras_IMUValue* imu_value);
  private:
  const ::openrtist::Extras_IMUValue& _internal_imu_value() const;
  ::openrtist::Extras_IMUValue* _internal_mutable_imu_value();
  public:
  void unsafe_arena_set_allocated_imu_value(
      ::openrtist::Extras_IMUValue* imu_value);
  ::openrtist::Extras_IMUValue* unsafe_arena_release_imu_value();

  // .openrtist.Extras.ScreenValue screen_value = 7;
  bool has_screen_value() const;
  private:
  bool _internal_has_screen_value() const;
  public:
  void clear_screen_value();
  const ::openrtist::Extras_ScreenValue& screen_value() const;
  ::openrtist::Extras_ScreenValue* release_screen_value();
  ::openrtist::Extras_ScreenValue* mutable_screen_value();
  void set_allocated_screen_value(::openrtist::Extras_ScreenValue* screen_value);
  private:
  const ::openrtist::Extras_ScreenValue& _internal_screen_value() const;
  ::openrtist::Extras_ScreenValue* _internal_mutable_screen_value();
  public:
  void unsafe_arena_set_allocated_screen_value(
      ::openrtist::Extras_ScreenValue* screen_value);
  ::openrtist::Extras_ScreenValue* unsafe_arena_release_screen_value();

  // .openrtist.Extras.TouchInput touch_value = 8;
  bool has_touch_value() const;
  private:
  bool _internal_has_touch_value() const;
  public:
  void clear_touch_value();
  const ::openrtist::Extras_TouchInput& touch_value() const;
  ::openrtist::Extras_TouchInput* release_touch_value();
  ::openrtist::Extras_TouchInput* mutable_touch_value();
  void set_allocated_touch_value(::openrtist::Extras_TouchInput* touch_value);
  private:
  const ::openrtist::Extras_TouchInput& _internal_touch_value() const;
  ::openrtist::Extras_TouchInput* _internal_mutable_touch_value();
  public:
  void unsafe_arena_set_allocated_touch_value(
      ::openrtist::Extras_TouchInput* touch_value);
  ::openrtist::Extras_TouchInput* unsafe_arena_release_touch_value();

  // int32 depth_threshold = 4;
  void clear_depth_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 depth_threshold() const;
  void set_depth_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth_threshold() const;
  void _internal_set_depth_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:openrtist.Extras)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Extras_StyleListEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > style_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr style_;
  ::openrtist::Extras_BytesValue* style_image_;
  ::openrtist::Extras_BytesValue* depth_map_;
  ::openrtist::Extras_IMUValue* imu_value_;
  ::openrtist::Extras_ScreenValue* screen_value_;
  ::openrtist::Extras_TouchInput* touch_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openrtist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Extras_BytesValue

// bytes value = 1;
inline void Extras_BytesValue::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Extras_BytesValue::value() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.BytesValue.value)
  return _internal_value();
}
inline void Extras_BytesValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:openrtist.Extras.BytesValue.value)
}
inline std::string* Extras_BytesValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:openrtist.Extras.BytesValue.value)
  return _internal_mutable_value();
}
inline const std::string& Extras_BytesValue::_internal_value() const {
  return value_.Get();
}
inline void Extras_BytesValue::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Extras_BytesValue::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openrtist.Extras.BytesValue.value)
}
inline void Extras_BytesValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:openrtist.Extras.BytesValue.value)
}
inline void Extras_BytesValue::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openrtist.Extras.BytesValue.value)
}
inline std::string* Extras_BytesValue::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Extras_BytesValue::release_value() {
  // @@protoc_insertion_point(field_release:openrtist.Extras.BytesValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Extras_BytesValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openrtist.Extras.BytesValue.value)
}
inline std::string* Extras_BytesValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:openrtist.Extras.BytesValue.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Extras_BytesValue::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openrtist.Extras.BytesValue.value)
}

// -------------------------------------------------------------------

// Extras_IMUValue

// float x = 1;
inline void Extras_IMUValue::clear_x() {
  x_ = 0;
}
inline float Extras_IMUValue::_internal_x() const {
  return x_;
}
inline float Extras_IMUValue::x() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.IMUValue.x)
  return _internal_x();
}
inline void Extras_IMUValue::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Extras_IMUValue::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:openrtist.Extras.IMUValue.x)
}

// float y = 2;
inline void Extras_IMUValue::clear_y() {
  y_ = 0;
}
inline float Extras_IMUValue::_internal_y() const {
  return y_;
}
inline float Extras_IMUValue::y() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.IMUValue.y)
  return _internal_y();
}
inline void Extras_IMUValue::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Extras_IMUValue::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:openrtist.Extras.IMUValue.y)
}

// float z = 3;
inline void Extras_IMUValue::clear_z() {
  z_ = 0;
}
inline float Extras_IMUValue::_internal_z() const {
  return z_;
}
inline float Extras_IMUValue::z() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.IMUValue.z)
  return _internal_z();
}
inline void Extras_IMUValue::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Extras_IMUValue::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:openrtist.Extras.IMUValue.z)
}

// -------------------------------------------------------------------

// Extras_TouchInput

// float scale = 1;
inline void Extras_TouchInput::clear_scale() {
  scale_ = 0;
}
inline float Extras_TouchInput::_internal_scale() const {
  return scale_;
}
inline float Extras_TouchInput::scale() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.TouchInput.scale)
  return _internal_scale();
}
inline void Extras_TouchInput::_internal_set_scale(float value) {
  
  scale_ = value;
}
inline void Extras_TouchInput::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:openrtist.Extras.TouchInput.scale)
}

// float x = 2;
inline void Extras_TouchInput::clear_x() {
  x_ = 0;
}
inline float Extras_TouchInput::_internal_x() const {
  return x_;
}
inline float Extras_TouchInput::x() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.TouchInput.x)
  return _internal_x();
}
inline void Extras_TouchInput::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Extras_TouchInput::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:openrtist.Extras.TouchInput.x)
}

// float y = 3;
inline void Extras_TouchInput::clear_y() {
  y_ = 0;
}
inline float Extras_TouchInput::_internal_y() const {
  return y_;
}
inline float Extras_TouchInput::y() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.TouchInput.y)
  return _internal_y();
}
inline void Extras_TouchInput::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Extras_TouchInput::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:openrtist.Extras.TouchInput.y)
}

// -------------------------------------------------------------------

// Extras_ScreenValue

// int32 height = 1;
inline void Extras_ScreenValue::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Extras_ScreenValue::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Extras_ScreenValue::height() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.ScreenValue.height)
  return _internal_height();
}
inline void Extras_ScreenValue::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Extras_ScreenValue::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:openrtist.Extras.ScreenValue.height)
}

// int32 width = 2;
inline void Extras_ScreenValue::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Extras_ScreenValue::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Extras_ScreenValue::width() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.ScreenValue.width)
  return _internal_width();
}
inline void Extras_ScreenValue::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Extras_ScreenValue::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:openrtist.Extras.ScreenValue.width)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Extras

// string style = 1;
inline void Extras::clear_style() {
  style_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Extras::style() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.style)
  return _internal_style();
}
inline void Extras::set_style(const std::string& value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:openrtist.Extras.style)
}
inline std::string* Extras::mutable_style() {
  // @@protoc_insertion_point(field_mutable:openrtist.Extras.style)
  return _internal_mutable_style();
}
inline const std::string& Extras::_internal_style() const {
  return style_.Get();
}
inline void Extras::_internal_set_style(const std::string& value) {
  
  style_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Extras::set_style(std::string&& value) {
  
  style_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openrtist.Extras.style)
}
inline void Extras::set_style(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  style_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:openrtist.Extras.style)
}
inline void Extras::set_style(const char* value,
    size_t size) {
  
  style_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openrtist.Extras.style)
}
inline std::string* Extras::_internal_mutable_style() {
  
  return style_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Extras::release_style() {
  // @@protoc_insertion_point(field_release:openrtist.Extras.style)
  return style_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Extras::set_allocated_style(std::string* style) {
  if (style != nullptr) {
    
  } else {
    
  }
  style_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), style,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openrtist.Extras.style)
}
inline std::string* Extras::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_unsafe_arena_release:openrtist.Extras.style)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return style_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Extras::unsafe_arena_set_allocated_style(
    std::string* style) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (style != nullptr) {
    
  } else {
    
  }
  style_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      style, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openrtist.Extras.style)
}

// map<string, string> style_list = 2;
inline int Extras::_internal_style_list_size() const {
  return style_list_.size();
}
inline int Extras::style_list_size() const {
  return _internal_style_list_size();
}
inline void Extras::clear_style_list() {
  style_list_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Extras::_internal_style_list() const {
  return style_list_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Extras::style_list() const {
  // @@protoc_insertion_point(field_map:openrtist.Extras.style_list)
  return _internal_style_list();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Extras::_internal_mutable_style_list() {
  return style_list_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Extras::mutable_style_list() {
  // @@protoc_insertion_point(field_mutable_map:openrtist.Extras.style_list)
  return _internal_mutable_style_list();
}

// .openrtist.Extras.BytesValue style_image = 3;
inline bool Extras::_internal_has_style_image() const {
  return this != internal_default_instance() && style_image_ != nullptr;
}
inline bool Extras::has_style_image() const {
  return _internal_has_style_image();
}
inline void Extras::clear_style_image() {
  if (GetArena() == nullptr && style_image_ != nullptr) {
    delete style_image_;
  }
  style_image_ = nullptr;
}
inline const ::openrtist::Extras_BytesValue& Extras::_internal_style_image() const {
  const ::openrtist::Extras_BytesValue* p = style_image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::openrtist::Extras_BytesValue*>(
      &::openrtist::_Extras_BytesValue_default_instance_);
}
inline const ::openrtist::Extras_BytesValue& Extras::style_image() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.style_image)
  return _internal_style_image();
}
inline void Extras::unsafe_arena_set_allocated_style_image(
    ::openrtist::Extras_BytesValue* style_image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_image_);
  }
  style_image_ = style_image;
  if (style_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openrtist.Extras.style_image)
}
inline ::openrtist::Extras_BytesValue* Extras::release_style_image() {
  auto temp = unsafe_arena_release_style_image();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openrtist::Extras_BytesValue* Extras::unsafe_arena_release_style_image() {
  // @@protoc_insertion_point(field_release:openrtist.Extras.style_image)
  
  ::openrtist::Extras_BytesValue* temp = style_image_;
  style_image_ = nullptr;
  return temp;
}
inline ::openrtist::Extras_BytesValue* Extras::_internal_mutable_style_image() {
  
  if (style_image_ == nullptr) {
    auto* p = CreateMaybeMessage<::openrtist::Extras_BytesValue>(GetArena());
    style_image_ = p;
  }
  return style_image_;
}
inline ::openrtist::Extras_BytesValue* Extras::mutable_style_image() {
  // @@protoc_insertion_point(field_mutable:openrtist.Extras.style_image)
  return _internal_mutable_style_image();
}
inline void Extras::set_allocated_style_image(::openrtist::Extras_BytesValue* style_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete style_image_;
  }
  if (style_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(style_image);
    if (message_arena != submessage_arena) {
      style_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_image, submessage_arena);
    }
    
  } else {
    
  }
  style_image_ = style_image;
  // @@protoc_insertion_point(field_set_allocated:openrtist.Extras.style_image)
}

// int32 depth_threshold = 4;
inline void Extras::clear_depth_threshold() {
  depth_threshold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Extras::_internal_depth_threshold() const {
  return depth_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Extras::depth_threshold() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.depth_threshold)
  return _internal_depth_threshold();
}
inline void Extras::_internal_set_depth_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth_threshold_ = value;
}
inline void Extras::set_depth_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth_threshold(value);
  // @@protoc_insertion_point(field_set:openrtist.Extras.depth_threshold)
}

// .openrtist.Extras.BytesValue depth_map = 5;
inline bool Extras::_internal_has_depth_map() const {
  return this != internal_default_instance() && depth_map_ != nullptr;
}
inline bool Extras::has_depth_map() const {
  return _internal_has_depth_map();
}
inline void Extras::clear_depth_map() {
  if (GetArena() == nullptr && depth_map_ != nullptr) {
    delete depth_map_;
  }
  depth_map_ = nullptr;
}
inline const ::openrtist::Extras_BytesValue& Extras::_internal_depth_map() const {
  const ::openrtist::Extras_BytesValue* p = depth_map_;
  return p != nullptr ? *p : *reinterpret_cast<const ::openrtist::Extras_BytesValue*>(
      &::openrtist::_Extras_BytesValue_default_instance_);
}
inline const ::openrtist::Extras_BytesValue& Extras::depth_map() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.depth_map)
  return _internal_depth_map();
}
inline void Extras::unsafe_arena_set_allocated_depth_map(
    ::openrtist::Extras_BytesValue* depth_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(depth_map_);
  }
  depth_map_ = depth_map;
  if (depth_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openrtist.Extras.depth_map)
}
inline ::openrtist::Extras_BytesValue* Extras::release_depth_map() {
  auto temp = unsafe_arena_release_depth_map();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openrtist::Extras_BytesValue* Extras::unsafe_arena_release_depth_map() {
  // @@protoc_insertion_point(field_release:openrtist.Extras.depth_map)
  
  ::openrtist::Extras_BytesValue* temp = depth_map_;
  depth_map_ = nullptr;
  return temp;
}
inline ::openrtist::Extras_BytesValue* Extras::_internal_mutable_depth_map() {
  
  if (depth_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::openrtist::Extras_BytesValue>(GetArena());
    depth_map_ = p;
  }
  return depth_map_;
}
inline ::openrtist::Extras_BytesValue* Extras::mutable_depth_map() {
  // @@protoc_insertion_point(field_mutable:openrtist.Extras.depth_map)
  return _internal_mutable_depth_map();
}
inline void Extras::set_allocated_depth_map(::openrtist::Extras_BytesValue* depth_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete depth_map_;
  }
  if (depth_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(depth_map);
    if (message_arena != submessage_arena) {
      depth_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, depth_map, submessage_arena);
    }
    
  } else {
    
  }
  depth_map_ = depth_map;
  // @@protoc_insertion_point(field_set_allocated:openrtist.Extras.depth_map)
}

// .openrtist.Extras.IMUValue imu_value = 6;
inline bool Extras::_internal_has_imu_value() const {
  return this != internal_default_instance() && imu_value_ != nullptr;
}
inline bool Extras::has_imu_value() const {
  return _internal_has_imu_value();
}
inline void Extras::clear_imu_value() {
  if (GetArena() == nullptr && imu_value_ != nullptr) {
    delete imu_value_;
  }
  imu_value_ = nullptr;
}
inline const ::openrtist::Extras_IMUValue& Extras::_internal_imu_value() const {
  const ::openrtist::Extras_IMUValue* p = imu_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::openrtist::Extras_IMUValue*>(
      &::openrtist::_Extras_IMUValue_default_instance_);
}
inline const ::openrtist::Extras_IMUValue& Extras::imu_value() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.imu_value)
  return _internal_imu_value();
}
inline void Extras::unsafe_arena_set_allocated_imu_value(
    ::openrtist::Extras_IMUValue* imu_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_value_);
  }
  imu_value_ = imu_value;
  if (imu_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openrtist.Extras.imu_value)
}
inline ::openrtist::Extras_IMUValue* Extras::release_imu_value() {
  auto temp = unsafe_arena_release_imu_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openrtist::Extras_IMUValue* Extras::unsafe_arena_release_imu_value() {
  // @@protoc_insertion_point(field_release:openrtist.Extras.imu_value)
  
  ::openrtist::Extras_IMUValue* temp = imu_value_;
  imu_value_ = nullptr;
  return temp;
}
inline ::openrtist::Extras_IMUValue* Extras::_internal_mutable_imu_value() {
  
  if (imu_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::openrtist::Extras_IMUValue>(GetArena());
    imu_value_ = p;
  }
  return imu_value_;
}
inline ::openrtist::Extras_IMUValue* Extras::mutable_imu_value() {
  // @@protoc_insertion_point(field_mutable:openrtist.Extras.imu_value)
  return _internal_mutable_imu_value();
}
inline void Extras::set_allocated_imu_value(::openrtist::Extras_IMUValue* imu_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete imu_value_;
  }
  if (imu_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(imu_value);
    if (message_arena != submessage_arena) {
      imu_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_value, submessage_arena);
    }
    
  } else {
    
  }
  imu_value_ = imu_value;
  // @@protoc_insertion_point(field_set_allocated:openrtist.Extras.imu_value)
}

// .openrtist.Extras.ScreenValue screen_value = 7;
inline bool Extras::_internal_has_screen_value() const {
  return this != internal_default_instance() && screen_value_ != nullptr;
}
inline bool Extras::has_screen_value() const {
  return _internal_has_screen_value();
}
inline void Extras::clear_screen_value() {
  if (GetArena() == nullptr && screen_value_ != nullptr) {
    delete screen_value_;
  }
  screen_value_ = nullptr;
}
inline const ::openrtist::Extras_ScreenValue& Extras::_internal_screen_value() const {
  const ::openrtist::Extras_ScreenValue* p = screen_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::openrtist::Extras_ScreenValue*>(
      &::openrtist::_Extras_ScreenValue_default_instance_);
}
inline const ::openrtist::Extras_ScreenValue& Extras::screen_value() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.screen_value)
  return _internal_screen_value();
}
inline void Extras::unsafe_arena_set_allocated_screen_value(
    ::openrtist::Extras_ScreenValue* screen_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(screen_value_);
  }
  screen_value_ = screen_value;
  if (screen_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openrtist.Extras.screen_value)
}
inline ::openrtist::Extras_ScreenValue* Extras::release_screen_value() {
  auto temp = unsafe_arena_release_screen_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openrtist::Extras_ScreenValue* Extras::unsafe_arena_release_screen_value() {
  // @@protoc_insertion_point(field_release:openrtist.Extras.screen_value)
  
  ::openrtist::Extras_ScreenValue* temp = screen_value_;
  screen_value_ = nullptr;
  return temp;
}
inline ::openrtist::Extras_ScreenValue* Extras::_internal_mutable_screen_value() {
  
  if (screen_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::openrtist::Extras_ScreenValue>(GetArena());
    screen_value_ = p;
  }
  return screen_value_;
}
inline ::openrtist::Extras_ScreenValue* Extras::mutable_screen_value() {
  // @@protoc_insertion_point(field_mutable:openrtist.Extras.screen_value)
  return _internal_mutable_screen_value();
}
inline void Extras::set_allocated_screen_value(::openrtist::Extras_ScreenValue* screen_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete screen_value_;
  }
  if (screen_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(screen_value);
    if (message_arena != submessage_arena) {
      screen_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen_value, submessage_arena);
    }
    
  } else {
    
  }
  screen_value_ = screen_value;
  // @@protoc_insertion_point(field_set_allocated:openrtist.Extras.screen_value)
}

// .openrtist.Extras.TouchInput touch_value = 8;
inline bool Extras::_internal_has_touch_value() const {
  return this != internal_default_instance() && touch_value_ != nullptr;
}
inline bool Extras::has_touch_value() const {
  return _internal_has_touch_value();
}
inline void Extras::clear_touch_value() {
  if (GetArena() == nullptr && touch_value_ != nullptr) {
    delete touch_value_;
  }
  touch_value_ = nullptr;
}
inline const ::openrtist::Extras_TouchInput& Extras::_internal_touch_value() const {
  const ::openrtist::Extras_TouchInput* p = touch_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::openrtist::Extras_TouchInput*>(
      &::openrtist::_Extras_TouchInput_default_instance_);
}
inline const ::openrtist::Extras_TouchInput& Extras::touch_value() const {
  // @@protoc_insertion_point(field_get:openrtist.Extras.touch_value)
  return _internal_touch_value();
}
inline void Extras::unsafe_arena_set_allocated_touch_value(
    ::openrtist::Extras_TouchInput* touch_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touch_value_);
  }
  touch_value_ = touch_value;
  if (touch_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openrtist.Extras.touch_value)
}
inline ::openrtist::Extras_TouchInput* Extras::release_touch_value() {
  auto temp = unsafe_arena_release_touch_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openrtist::Extras_TouchInput* Extras::unsafe_arena_release_touch_value() {
  // @@protoc_insertion_point(field_release:openrtist.Extras.touch_value)
  
  ::openrtist::Extras_TouchInput* temp = touch_value_;
  touch_value_ = nullptr;
  return temp;
}
inline ::openrtist::Extras_TouchInput* Extras::_internal_mutable_touch_value() {
  
  if (touch_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::openrtist::Extras_TouchInput>(GetArena());
    touch_value_ = p;
  }
  return touch_value_;
}
inline ::openrtist::Extras_TouchInput* Extras::mutable_touch_value() {
  // @@protoc_insertion_point(field_mutable:openrtist.Extras.touch_value)
  return _internal_mutable_touch_value();
}
inline void Extras::set_allocated_touch_value(::openrtist::Extras_TouchInput* touch_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete touch_value_;
  }
  if (touch_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(touch_value);
    if (message_arena != submessage_arena) {
      touch_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touch_value, submessage_arena);
    }
    
  } else {
    
  }
  touch_value_ = touch_value;
  // @@protoc_insertion_point(field_set_allocated:openrtist.Extras.touch_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace openrtist

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openrtist_2eproto
