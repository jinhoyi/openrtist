// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gabriel.proto

#include "gabriel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gabriel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FromStandaloneEngine_Welcome_gabriel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gabriel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputFrame_gabriel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gabriel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ResultWrapper_gabriel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gabriel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultWrapper_Result_gabriel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gabriel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultWrapper_StringValue_gabriel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gabriel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ToClient_Response_gabriel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gabriel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ToClient_Welcome_gabriel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace gabriel {
class InputFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputFrame> _instance;
} _InputFrame_default_instance_;
class FromClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FromClient> _instance;
} _FromClient_default_instance_;
class ResultWrapper_ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultWrapper_Result> _instance;
} _ResultWrapper_Result_default_instance_;
class ResultWrapper_StringValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultWrapper_StringValue> _instance;
} _ResultWrapper_StringValue_default_instance_;
class ResultWrapperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultWrapper> _instance;
} _ResultWrapper_default_instance_;
class ToClient_WelcomeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ToClient_Welcome> _instance;
} _ToClient_Welcome_default_instance_;
class ToClient_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ToClient_Response> _instance;
} _ToClient_Response_default_instance_;
class ToClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ToClient> _instance;
  const ::gabriel::ToClient_Welcome* welcome_;
  const ::gabriel::ToClient_Response* response_;
} _ToClient_default_instance_;
class FromStandaloneEngine_WelcomeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FromStandaloneEngine_Welcome> _instance;
} _FromStandaloneEngine_Welcome_default_instance_;
class FromStandaloneEngineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FromStandaloneEngine> _instance;
  const ::gabriel::FromStandaloneEngine_Welcome* welcome_;
  const ::gabriel::ResultWrapper* result_wrapper_;
} _FromStandaloneEngine_default_instance_;
}  // namespace gabriel
static void InitDefaultsscc_info_FromClient_gabriel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gabriel::_FromClient_default_instance_;
    new (ptr) ::gabriel::FromClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gabriel::FromClient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FromClient_gabriel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FromClient_gabriel_2eproto}, {
      &scc_info_InputFrame_gabriel_2eproto.base,}};

static void InitDefaultsscc_info_FromStandaloneEngine_gabriel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gabriel::_FromStandaloneEngine_default_instance_;
    new (ptr) ::gabriel::FromStandaloneEngine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gabriel::FromStandaloneEngine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FromStandaloneEngine_gabriel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FromStandaloneEngine_gabriel_2eproto}, {
      &scc_info_FromStandaloneEngine_Welcome_gabriel_2eproto.base,
      &scc_info_ResultWrapper_gabriel_2eproto.base,}};

static void InitDefaultsscc_info_FromStandaloneEngine_Welcome_gabriel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gabriel::_FromStandaloneEngine_Welcome_default_instance_;
    new (ptr) ::gabriel::FromStandaloneEngine_Welcome();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gabriel::FromStandaloneEngine_Welcome::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FromStandaloneEngine_Welcome_gabriel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FromStandaloneEngine_Welcome_gabriel_2eproto}, {}};

static void InitDefaultsscc_info_InputFrame_gabriel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gabriel::_InputFrame_default_instance_;
    new (ptr) ::gabriel::InputFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gabriel::InputFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputFrame_gabriel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InputFrame_gabriel_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ResultWrapper_gabriel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gabriel::_ResultWrapper_default_instance_;
    new (ptr) ::gabriel::ResultWrapper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gabriel::ResultWrapper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ResultWrapper_gabriel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ResultWrapper_gabriel_2eproto}, {
      &scc_info_ResultWrapper_Result_gabriel_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_ResultWrapper_StringValue_gabriel_2eproto.base,}};

static void InitDefaultsscc_info_ResultWrapper_Result_gabriel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gabriel::_ResultWrapper_Result_default_instance_;
    new (ptr) ::gabriel::ResultWrapper_Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gabriel::ResultWrapper_Result::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultWrapper_Result_gabriel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResultWrapper_Result_gabriel_2eproto}, {}};

static void InitDefaultsscc_info_ResultWrapper_StringValue_gabriel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gabriel::_ResultWrapper_StringValue_default_instance_;
    new (ptr) ::gabriel::ResultWrapper_StringValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gabriel::ResultWrapper_StringValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultWrapper_StringValue_gabriel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResultWrapper_StringValue_gabriel_2eproto}, {}};

static void InitDefaultsscc_info_ToClient_gabriel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gabriel::_ToClient_default_instance_;
    new (ptr) ::gabriel::ToClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gabriel::ToClient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ToClient_gabriel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ToClient_gabriel_2eproto}, {
      &scc_info_ToClient_Welcome_gabriel_2eproto.base,
      &scc_info_ToClient_Response_gabriel_2eproto.base,}};

static void InitDefaultsscc_info_ToClient_Response_gabriel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gabriel::_ToClient_Response_default_instance_;
    new (ptr) ::gabriel::ToClient_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gabriel::ToClient_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ToClient_Response_gabriel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ToClient_Response_gabriel_2eproto}, {
      &scc_info_ResultWrapper_gabriel_2eproto.base,}};

static void InitDefaultsscc_info_ToClient_Welcome_gabriel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gabriel::_ToClient_Welcome_default_instance_;
    new (ptr) ::gabriel::ToClient_Welcome();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gabriel::ToClient_Welcome::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ToClient_Welcome_gabriel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ToClient_Welcome_gabriel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gabriel_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gabriel_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gabriel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gabriel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gabriel::InputFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gabriel::InputFrame, payload_type_),
  PROTOBUF_FIELD_OFFSET(::gabriel::InputFrame, payloads_),
  PROTOBUF_FIELD_OFFSET(::gabriel::InputFrame, extras_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gabriel::FromClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gabriel::FromClient, frame_id_),
  PROTOBUF_FIELD_OFFSET(::gabriel::FromClient, source_name_),
  PROTOBUF_FIELD_OFFSET(::gabriel::FromClient, input_frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gabriel::ResultWrapper_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gabriel::ResultWrapper_Result, payload_type_),
  PROTOBUF_FIELD_OFFSET(::gabriel::ResultWrapper_Result, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gabriel::ResultWrapper_StringValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gabriel::ResultWrapper_StringValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gabriel::ResultWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gabriel::ResultWrapper, status_),
  PROTOBUF_FIELD_OFFSET(::gabriel::ResultWrapper, results_),
  PROTOBUF_FIELD_OFFSET(::gabriel::ResultWrapper, extras_),
  PROTOBUF_FIELD_OFFSET(::gabriel::ResultWrapper, result_producer_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gabriel::ToClient_Welcome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gabriel::ToClient_Welcome, sources_consumed_),
  PROTOBUF_FIELD_OFFSET(::gabriel::ToClient_Welcome, num_tokens_per_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gabriel::ToClient_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gabriel::ToClient_Response, source_name_),
  PROTOBUF_FIELD_OFFSET(::gabriel::ToClient_Response, frame_id_),
  PROTOBUF_FIELD_OFFSET(::gabriel::ToClient_Response, return_token_),
  PROTOBUF_FIELD_OFFSET(::gabriel::ToClient_Response, result_wrapper_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gabriel::ToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gabriel::ToClient, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::gabriel::ToClientDefaultTypeInternal, welcome_),
  offsetof(::gabriel::ToClientDefaultTypeInternal, response_),
  PROTOBUF_FIELD_OFFSET(::gabriel::ToClient, welcome_or_response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gabriel::FromStandaloneEngine_Welcome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gabriel::FromStandaloneEngine_Welcome, source_name_),
  PROTOBUF_FIELD_OFFSET(::gabriel::FromStandaloneEngine_Welcome, all_responses_required_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gabriel::FromStandaloneEngine, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gabriel::FromStandaloneEngine, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::gabriel::FromStandaloneEngineDefaultTypeInternal, welcome_),
  offsetof(::gabriel::FromStandaloneEngineDefaultTypeInternal, result_wrapper_),
  PROTOBUF_FIELD_OFFSET(::gabriel::FromStandaloneEngine, welcome_or_result_wrapper_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gabriel::InputFrame)},
  { 8, -1, sizeof(::gabriel::FromClient)},
  { 16, -1, sizeof(::gabriel::ResultWrapper_Result)},
  { 23, -1, sizeof(::gabriel::ResultWrapper_StringValue)},
  { 29, -1, sizeof(::gabriel::ResultWrapper)},
  { 38, -1, sizeof(::gabriel::ToClient_Welcome)},
  { 45, -1, sizeof(::gabriel::ToClient_Response)},
  { 54, -1, sizeof(::gabriel::ToClient)},
  { 62, -1, sizeof(::gabriel::FromStandaloneEngine_Welcome)},
  { 69, -1, sizeof(::gabriel::FromStandaloneEngine)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gabriel::_InputFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gabriel::_FromClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gabriel::_ResultWrapper_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gabriel::_ResultWrapper_StringValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gabriel::_ResultWrapper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gabriel::_ToClient_Welcome_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gabriel::_ToClient_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gabriel::_ToClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gabriel::_FromStandaloneEngine_Welcome_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gabriel::_FromStandaloneEngine_default_instance_),
};

const char descriptor_table_protodef_gabriel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rgabriel.proto\022\007gabriel\032\031google/protobu"
  "f/any.proto\"p\n\nInputFrame\022*\n\014payload_typ"
  "e\030\001 \001(\0162\024.gabriel.PayloadType\022\020\n\010payload"
  "s\030\002 \003(\014\022$\n\006extras\030\003 \001(\0132\024.google.protobu"
  "f.Any\"]\n\nFromClient\022\020\n\010frame_id\030\001 \001(\003\022\023\n"
  "\013source_name\030\002 \001(\t\022(\n\013input_frame\030\003 \001(\0132"
  "\023.gabriel.InputFrame\"\327\003\n\rResultWrapper\022-"
  "\n\006status\030\001 \001(\0162\035.gabriel.ResultWrapper.S"
  "tatus\022.\n\007results\030\002 \003(\0132\035.gabriel.ResultW"
  "rapper.Result\022$\n\006extras\030\003 \001(\0132\024.google.p"
  "rotobuf.Any\022@\n\024result_producer_name\030\004 \001("
  "\0132\".gabriel.ResultWrapper.StringValue\032E\n"
  "\006Result\022*\n\014payload_type\030\001 \001(\0162\024.gabriel."
  "PayloadType\022\017\n\007payload\030\002 \001(\014\032\034\n\013StringVa"
  "lue\022\r\n\005value\030\001 \001(\t\"\231\001\n\006Status\022\013\n\007SUCCESS"
  "\020\000\022\025\n\021UNSPECIFIED_ERROR\020\001\022\020\n\014ENGINE_ERRO"
  "R\020\002\022\026\n\022WRONG_INPUT_FORMAT\020\003\022\030\n\024NO_ENGINE"
  "_FOR_SOURCE\020\004\022\r\n\tNO_TOKENS\020\005\022\030\n\024SERVER_D"
  "ROPPED_FRAME\020\006\"\274\002\n\010ToClient\022,\n\007welcome\030\001"
  " \001(\0132\031.gabriel.ToClient.WelcomeH\000\022.\n\010res"
  "ponse\030\002 \001(\0132\032.gabriel.ToClient.ResponseH"
  "\000\032B\n\007Welcome\022\030\n\020sources_consumed\030\001 \003(\t\022\035"
  "\n\025num_tokens_per_source\030\002 \001(\005\032w\n\010Respons"
  "e\022\023\n\013source_name\030\001 \001(\t\022\020\n\010frame_id\030\002 \001(\003"
  "\022\024\n\014return_token\030\003 \001(\010\022.\n\016result_wrapper"
  "\030\004 \001(\0132\026.gabriel.ResultWrapperB\025\n\023welcom"
  "e_or_response\"\337\001\n\024FromStandaloneEngine\0228"
  "\n\007welcome\030\001 \001(\0132%.gabriel.FromStandalone"
  "Engine.WelcomeH\000\0220\n\016result_wrapper\030\002 \001(\013"
  "2\026.gabriel.ResultWrapperH\000\032>\n\007Welcome\022\023\n"
  "\013source_name\030\001 \001(\t\022\036\n\026all_responses_requ"
  "ired\030\002 \001(\010B\033\n\031welcome_or_result_wrapper*"
  "[\n\013PayloadType\022\t\n\005IMAGE\020\000\022\t\n\005VIDEO\020\001\022\t\n\005"
  "AUDIO\020\002\022\007\n\003IMU\020\003\022\010\n\004TEXT\020\004\022\r\n\tANIMATION\020"
  "\005\022\t\n\005OTHER\020\006B%\n\033edu.cmu.cs.gabriel.proto"
  "colB\006Protosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gabriel_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gabriel_2eproto_sccs[10] = {
  &scc_info_FromClient_gabriel_2eproto.base,
  &scc_info_FromStandaloneEngine_gabriel_2eproto.base,
  &scc_info_FromStandaloneEngine_Welcome_gabriel_2eproto.base,
  &scc_info_InputFrame_gabriel_2eproto.base,
  &scc_info_ResultWrapper_gabriel_2eproto.base,
  &scc_info_ResultWrapper_Result_gabriel_2eproto.base,
  &scc_info_ResultWrapper_StringValue_gabriel_2eproto.base,
  &scc_info_ToClient_gabriel_2eproto.base,
  &scc_info_ToClient_Response_gabriel_2eproto.base,
  &scc_info_ToClient_Welcome_gabriel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gabriel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gabriel_2eproto = {
  false, false, descriptor_table_protodef_gabriel_2eproto, "gabriel.proto", 1419,
  &descriptor_table_gabriel_2eproto_once, descriptor_table_gabriel_2eproto_sccs, descriptor_table_gabriel_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_gabriel_2eproto::offsets,
  file_level_metadata_gabriel_2eproto, 10, file_level_enum_descriptors_gabriel_2eproto, file_level_service_descriptors_gabriel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gabriel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gabriel_2eproto)), true);
namespace gabriel {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultWrapper_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gabriel_2eproto);
  return file_level_enum_descriptors_gabriel_2eproto[0];
}
bool ResultWrapper_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResultWrapper_Status ResultWrapper::SUCCESS;
constexpr ResultWrapper_Status ResultWrapper::UNSPECIFIED_ERROR;
constexpr ResultWrapper_Status ResultWrapper::ENGINE_ERROR;
constexpr ResultWrapper_Status ResultWrapper::WRONG_INPUT_FORMAT;
constexpr ResultWrapper_Status ResultWrapper::NO_ENGINE_FOR_SOURCE;
constexpr ResultWrapper_Status ResultWrapper::NO_TOKENS;
constexpr ResultWrapper_Status ResultWrapper::SERVER_DROPPED_FRAME;
constexpr ResultWrapper_Status ResultWrapper::Status_MIN;
constexpr ResultWrapper_Status ResultWrapper::Status_MAX;
constexpr int ResultWrapper::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PayloadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gabriel_2eproto);
  return file_level_enum_descriptors_gabriel_2eproto[1];
}
bool PayloadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void InputFrame::InitAsDefaultInstance() {
  ::gabriel::_InputFrame_default_instance_._instance.get_mutable()->extras_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class InputFrame::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& extras(const InputFrame* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
InputFrame::_Internal::extras(const InputFrame* msg) {
  return *msg->extras_;
}
void InputFrame::clear_extras() {
  if (GetArena() == nullptr && extras_ != nullptr) {
    delete extras_;
  }
  extras_ = nullptr;
}
InputFrame::InputFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  payloads_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gabriel.InputFrame)
}
InputFrame::InputFrame(const InputFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      payloads_(from.payloads_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_extras()) {
    extras_ = new PROTOBUF_NAMESPACE_ID::Any(*from.extras_);
  } else {
    extras_ = nullptr;
  }
  payload_type_ = from.payload_type_;
  // @@protoc_insertion_point(copy_constructor:gabriel.InputFrame)
}

void InputFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputFrame_gabriel_2eproto.base);
  ::memset(&extras_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payload_type_) -
      reinterpret_cast<char*>(&extras_)) + sizeof(payload_type_));
}

InputFrame::~InputFrame() {
  // @@protoc_insertion_point(destructor:gabriel.InputFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete extras_;
}

void InputFrame::ArenaDtor(void* object) {
  InputFrame* _this = reinterpret_cast< InputFrame* >(object);
  (void)_this;
}
void InputFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputFrame& InputFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputFrame_gabriel_2eproto.base);
  return *internal_default_instance();
}


void InputFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:gabriel.InputFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payloads_.Clear();
  if (GetArena() == nullptr && extras_ != nullptr) {
    delete extras_;
  }
  extras_ = nullptr;
  payload_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gabriel.PayloadType payload_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_payload_type(static_cast<::gabriel::PayloadType>(val));
        } else goto handle_unusual;
        continue;
      // repeated bytes payloads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_payloads();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any extras = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extras(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gabriel.InputFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gabriel.PayloadType payload_type = 1;
  if (this->payload_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_payload_type(), target);
  }

  // repeated bytes payloads = 2;
  for (int i = 0, n = this->_internal_payloads_size(); i < n; i++) {
    const auto& s = this->_internal_payloads(i);
    target = stream->WriteBytes(2, s, target);
  }

  // .google.protobuf.Any extras = 3;
  if (this->has_extras()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::extras(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gabriel.InputFrame)
  return target;
}

size_t InputFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gabriel.InputFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes payloads = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(payloads_.size());
  for (int i = 0, n = payloads_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      payloads_.Get(i));
  }

  // .google.protobuf.Any extras = 3;
  if (this->has_extras()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extras_);
  }

  // .gabriel.PayloadType payload_type = 1;
  if (this->payload_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_payload_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gabriel.InputFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const InputFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gabriel.InputFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gabriel.InputFrame)
    MergeFrom(*source);
  }
}

void InputFrame::MergeFrom(const InputFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gabriel.InputFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payloads_.MergeFrom(from.payloads_);
  if (from.has_extras()) {
    _internal_mutable_extras()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_extras());
  }
  if (from.payload_type() != 0) {
    _internal_set_payload_type(from._internal_payload_type());
  }
}

void InputFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gabriel.InputFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputFrame::CopyFrom(const InputFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gabriel.InputFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputFrame::IsInitialized() const {
  return true;
}

void InputFrame::InternalSwap(InputFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  payloads_.InternalSwap(&other->payloads_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputFrame, payload_type_)
      + sizeof(InputFrame::payload_type_)
      - PROTOBUF_FIELD_OFFSET(InputFrame, extras_)>(
          reinterpret_cast<char*>(&extras_),
          reinterpret_cast<char*>(&other->extras_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FromClient::InitAsDefaultInstance() {
  ::gabriel::_FromClient_default_instance_._instance.get_mutable()->input_frame_ = const_cast< ::gabriel::InputFrame*>(
      ::gabriel::InputFrame::internal_default_instance());
}
class FromClient::_Internal {
 public:
  static const ::gabriel::InputFrame& input_frame(const FromClient* msg);
};

const ::gabriel::InputFrame&
FromClient::_Internal::input_frame(const FromClient* msg) {
  return *msg->input_frame_;
}
FromClient::FromClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gabriel.FromClient)
}
FromClient::FromClient(const FromClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_name().empty()) {
    source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source_name(),
      GetArena());
  }
  if (from._internal_has_input_frame()) {
    input_frame_ = new ::gabriel::InputFrame(*from.input_frame_);
  } else {
    input_frame_ = nullptr;
  }
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:gabriel.FromClient)
}

void FromClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FromClient_gabriel_2eproto.base);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&input_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&input_frame_)) + sizeof(frame_id_));
}

FromClient::~FromClient() {
  // @@protoc_insertion_point(destructor:gabriel.FromClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FromClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete input_frame_;
}

void FromClient::ArenaDtor(void* object) {
  FromClient* _this = reinterpret_cast< FromClient* >(object);
  (void)_this;
}
void FromClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FromClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FromClient& FromClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FromClient_gabriel_2eproto.base);
  return *internal_default_instance();
}


void FromClient::Clear() {
// @@protoc_insertion_point(message_clear_start:gabriel.FromClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && input_frame_ != nullptr) {
    delete input_frame_;
  }
  input_frame_ = nullptr;
  frame_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FromClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gabriel.FromClient.source_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gabriel.InputFrame input_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FromClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gabriel.FromClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // string source_name = 2;
  if (this->source_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_name().data(), static_cast<int>(this->_internal_source_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gabriel.FromClient.source_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_name(), target);
  }

  // .gabriel.InputFrame input_frame = 3;
  if (this->has_input_frame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::input_frame(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gabriel.FromClient)
  return target;
}

size_t FromClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gabriel.FromClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_name = 2;
  if (this->source_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_name());
  }

  // .gabriel.InputFrame input_frame = 3;
  if (this->has_input_frame()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_frame_);
  }

  // int64 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FromClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gabriel.FromClient)
  GOOGLE_DCHECK_NE(&from, this);
  const FromClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FromClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gabriel.FromClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gabriel.FromClient)
    MergeFrom(*source);
  }
}

void FromClient::MergeFrom(const FromClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gabriel.FromClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_name().size() > 0) {
    _internal_set_source_name(from._internal_source_name());
  }
  if (from.has_input_frame()) {
    _internal_mutable_input_frame()->::gabriel::InputFrame::MergeFrom(from._internal_input_frame());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
}

void FromClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gabriel.FromClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FromClient::CopyFrom(const FromClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gabriel.FromClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FromClient::IsInitialized() const {
  return true;
}

void FromClient::InternalSwap(FromClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_name_.Swap(&other->source_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FromClient, frame_id_)
      + sizeof(FromClient::frame_id_)
      - PROTOBUF_FIELD_OFFSET(FromClient, input_frame_)>(
          reinterpret_cast<char*>(&input_frame_),
          reinterpret_cast<char*>(&other->input_frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FromClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResultWrapper_Result::InitAsDefaultInstance() {
}
class ResultWrapper_Result::_Internal {
 public:
};

ResultWrapper_Result::ResultWrapper_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gabriel.ResultWrapper.Result)
}
ResultWrapper_Result::ResultWrapper_Result(const ResultWrapper_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_payload(),
      GetArena());
  }
  payload_type_ = from.payload_type_;
  // @@protoc_insertion_point(copy_constructor:gabriel.ResultWrapper.Result)
}

void ResultWrapper_Result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResultWrapper_Result_gabriel_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_type_ = 0;
}

ResultWrapper_Result::~ResultWrapper_Result() {
  // @@protoc_insertion_point(destructor:gabriel.ResultWrapper.Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResultWrapper_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResultWrapper_Result::ArenaDtor(void* object) {
  ResultWrapper_Result* _this = reinterpret_cast< ResultWrapper_Result* >(object);
  (void)_this;
}
void ResultWrapper_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResultWrapper_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultWrapper_Result& ResultWrapper_Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultWrapper_Result_gabriel_2eproto.base);
  return *internal_default_instance();
}


void ResultWrapper_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:gabriel.ResultWrapper.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultWrapper_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gabriel.PayloadType payload_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_payload_type(static_cast<::gabriel::PayloadType>(val));
        } else goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResultWrapper_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gabriel.ResultWrapper.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gabriel.PayloadType payload_type = 1;
  if (this->payload_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_payload_type(), target);
  }

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gabriel.ResultWrapper.Result)
  return target;
}

size_t ResultWrapper_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gabriel.ResultWrapper.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // .gabriel.PayloadType payload_type = 1;
  if (this->payload_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_payload_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultWrapper_Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gabriel.ResultWrapper.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultWrapper_Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResultWrapper_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gabriel.ResultWrapper.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gabriel.ResultWrapper.Result)
    MergeFrom(*source);
  }
}

void ResultWrapper_Result::MergeFrom(const ResultWrapper_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gabriel.ResultWrapper.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.payload_type() != 0) {
    _internal_set_payload_type(from._internal_payload_type());
  }
}

void ResultWrapper_Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gabriel.ResultWrapper.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultWrapper_Result::CopyFrom(const ResultWrapper_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gabriel.ResultWrapper.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultWrapper_Result::IsInitialized() const {
  return true;
}

void ResultWrapper_Result::InternalSwap(ResultWrapper_Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(payload_type_, other->payload_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultWrapper_Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResultWrapper_StringValue::InitAsDefaultInstance() {
}
class ResultWrapper_StringValue::_Internal {
 public:
};

ResultWrapper_StringValue::ResultWrapper_StringValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gabriel.ResultWrapper.StringValue)
}
ResultWrapper_StringValue::ResultWrapper_StringValue(const ResultWrapper_StringValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:gabriel.ResultWrapper.StringValue)
}

void ResultWrapper_StringValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResultWrapper_StringValue_gabriel_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResultWrapper_StringValue::~ResultWrapper_StringValue() {
  // @@protoc_insertion_point(destructor:gabriel.ResultWrapper.StringValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResultWrapper_StringValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResultWrapper_StringValue::ArenaDtor(void* object) {
  ResultWrapper_StringValue* _this = reinterpret_cast< ResultWrapper_StringValue* >(object);
  (void)_this;
}
void ResultWrapper_StringValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResultWrapper_StringValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultWrapper_StringValue& ResultWrapper_StringValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultWrapper_StringValue_gabriel_2eproto.base);
  return *internal_default_instance();
}


void ResultWrapper_StringValue::Clear() {
// @@protoc_insertion_point(message_clear_start:gabriel.ResultWrapper.StringValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultWrapper_StringValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gabriel.ResultWrapper.StringValue.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResultWrapper_StringValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gabriel.ResultWrapper.StringValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gabriel.ResultWrapper.StringValue.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gabriel.ResultWrapper.StringValue)
  return target;
}

size_t ResultWrapper_StringValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gabriel.ResultWrapper.StringValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultWrapper_StringValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gabriel.ResultWrapper.StringValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultWrapper_StringValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResultWrapper_StringValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gabriel.ResultWrapper.StringValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gabriel.ResultWrapper.StringValue)
    MergeFrom(*source);
  }
}

void ResultWrapper_StringValue::MergeFrom(const ResultWrapper_StringValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gabriel.ResultWrapper.StringValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void ResultWrapper_StringValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gabriel.ResultWrapper.StringValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultWrapper_StringValue::CopyFrom(const ResultWrapper_StringValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gabriel.ResultWrapper.StringValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultWrapper_StringValue::IsInitialized() const {
  return true;
}

void ResultWrapper_StringValue::InternalSwap(ResultWrapper_StringValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultWrapper_StringValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResultWrapper::InitAsDefaultInstance() {
  ::gabriel::_ResultWrapper_default_instance_._instance.get_mutable()->extras_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::gabriel::_ResultWrapper_default_instance_._instance.get_mutable()->result_producer_name_ = const_cast< ::gabriel::ResultWrapper_StringValue*>(
      ::gabriel::ResultWrapper_StringValue::internal_default_instance());
}
class ResultWrapper::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& extras(const ResultWrapper* msg);
  static const ::gabriel::ResultWrapper_StringValue& result_producer_name(const ResultWrapper* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
ResultWrapper::_Internal::extras(const ResultWrapper* msg) {
  return *msg->extras_;
}
const ::gabriel::ResultWrapper_StringValue&
ResultWrapper::_Internal::result_producer_name(const ResultWrapper* msg) {
  return *msg->result_producer_name_;
}
void ResultWrapper::clear_extras() {
  if (GetArena() == nullptr && extras_ != nullptr) {
    delete extras_;
  }
  extras_ = nullptr;
}
ResultWrapper::ResultWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gabriel.ResultWrapper)
}
ResultWrapper::ResultWrapper(const ResultWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_extras()) {
    extras_ = new PROTOBUF_NAMESPACE_ID::Any(*from.extras_);
  } else {
    extras_ = nullptr;
  }
  if (from._internal_has_result_producer_name()) {
    result_producer_name_ = new ::gabriel::ResultWrapper_StringValue(*from.result_producer_name_);
  } else {
    result_producer_name_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:gabriel.ResultWrapper)
}

void ResultWrapper::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResultWrapper_gabriel_2eproto.base);
  ::memset(&extras_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&extras_)) + sizeof(status_));
}

ResultWrapper::~ResultWrapper() {
  // @@protoc_insertion_point(destructor:gabriel.ResultWrapper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResultWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete extras_;
  if (this != internal_default_instance()) delete result_producer_name_;
}

void ResultWrapper::ArenaDtor(void* object) {
  ResultWrapper* _this = reinterpret_cast< ResultWrapper* >(object);
  (void)_this;
}
void ResultWrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResultWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultWrapper& ResultWrapper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultWrapper_gabriel_2eproto.base);
  return *internal_default_instance();
}


void ResultWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:gabriel.ResultWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArena() == nullptr && extras_ != nullptr) {
    delete extras_;
  }
  extras_ = nullptr;
  if (GetArena() == nullptr && result_producer_name_ != nullptr) {
    delete result_producer_name_;
  }
  result_producer_name_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gabriel.ResultWrapper.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::gabriel::ResultWrapper_Status>(val));
        } else goto handle_unusual;
        continue;
      // repeated .gabriel.ResultWrapper.Result results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any extras = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extras(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gabriel.ResultWrapper.StringValue result_producer_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_producer_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResultWrapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gabriel.ResultWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gabriel.ResultWrapper.Status status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // repeated .gabriel.ResultWrapper.Result results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  // .google.protobuf.Any extras = 3;
  if (this->has_extras()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::extras(this), target, stream);
  }

  // .gabriel.ResultWrapper.StringValue result_producer_name = 4;
  if (this->has_result_producer_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::result_producer_name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gabriel.ResultWrapper)
  return target;
}

size_t ResultWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gabriel.ResultWrapper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gabriel.ResultWrapper.Result results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Any extras = 3;
  if (this->has_extras()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extras_);
  }

  // .gabriel.ResultWrapper.StringValue result_producer_name = 4;
  if (this->has_result_producer_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_producer_name_);
  }

  // .gabriel.ResultWrapper.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultWrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gabriel.ResultWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultWrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResultWrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gabriel.ResultWrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gabriel.ResultWrapper)
    MergeFrom(*source);
  }
}

void ResultWrapper::MergeFrom(const ResultWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gabriel.ResultWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_extras()) {
    _internal_mutable_extras()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_extras());
  }
  if (from.has_result_producer_name()) {
    _internal_mutable_result_producer_name()->::gabriel::ResultWrapper_StringValue::MergeFrom(from._internal_result_producer_name());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ResultWrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gabriel.ResultWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultWrapper::CopyFrom(const ResultWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gabriel.ResultWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultWrapper::IsInitialized() const {
  return true;
}

void ResultWrapper::InternalSwap(ResultWrapper* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResultWrapper, status_)
      + sizeof(ResultWrapper::status_)
      - PROTOBUF_FIELD_OFFSET(ResultWrapper, extras_)>(
          reinterpret_cast<char*>(&extras_),
          reinterpret_cast<char*>(&other->extras_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultWrapper::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ToClient_Welcome::InitAsDefaultInstance() {
}
class ToClient_Welcome::_Internal {
 public:
};

ToClient_Welcome::ToClient_Welcome(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sources_consumed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gabriel.ToClient.Welcome)
}
ToClient_Welcome::ToClient_Welcome(const ToClient_Welcome& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sources_consumed_(from.sources_consumed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_tokens_per_source_ = from.num_tokens_per_source_;
  // @@protoc_insertion_point(copy_constructor:gabriel.ToClient.Welcome)
}

void ToClient_Welcome::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ToClient_Welcome_gabriel_2eproto.base);
  num_tokens_per_source_ = 0;
}

ToClient_Welcome::~ToClient_Welcome() {
  // @@protoc_insertion_point(destructor:gabriel.ToClient.Welcome)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToClient_Welcome::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ToClient_Welcome::ArenaDtor(void* object) {
  ToClient_Welcome* _this = reinterpret_cast< ToClient_Welcome* >(object);
  (void)_this;
}
void ToClient_Welcome::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToClient_Welcome::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToClient_Welcome& ToClient_Welcome::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ToClient_Welcome_gabriel_2eproto.base);
  return *internal_default_instance();
}


void ToClient_Welcome::Clear() {
// @@protoc_insertion_point(message_clear_start:gabriel.ToClient.Welcome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_consumed_.Clear();
  num_tokens_per_source_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToClient_Welcome::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string sources_consumed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sources_consumed();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gabriel.ToClient.Welcome.sources_consumed"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 num_tokens_per_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_tokens_per_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToClient_Welcome::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gabriel.ToClient.Welcome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string sources_consumed = 1;
  for (int i = 0, n = this->_internal_sources_consumed_size(); i < n; i++) {
    const auto& s = this->_internal_sources_consumed(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gabriel.ToClient.Welcome.sources_consumed");
    target = stream->WriteString(1, s, target);
  }

  // int32 num_tokens_per_source = 2;
  if (this->num_tokens_per_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_tokens_per_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gabriel.ToClient.Welcome)
  return target;
}

size_t ToClient_Welcome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gabriel.ToClient.Welcome)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sources_consumed = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sources_consumed_.size());
  for (int i = 0, n = sources_consumed_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sources_consumed_.Get(i));
  }

  // int32 num_tokens_per_source = 2;
  if (this->num_tokens_per_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_tokens_per_source());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToClient_Welcome::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gabriel.ToClient.Welcome)
  GOOGLE_DCHECK_NE(&from, this);
  const ToClient_Welcome* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToClient_Welcome>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gabriel.ToClient.Welcome)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gabriel.ToClient.Welcome)
    MergeFrom(*source);
  }
}

void ToClient_Welcome::MergeFrom(const ToClient_Welcome& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gabriel.ToClient.Welcome)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_consumed_.MergeFrom(from.sources_consumed_);
  if (from.num_tokens_per_source() != 0) {
    _internal_set_num_tokens_per_source(from._internal_num_tokens_per_source());
  }
}

void ToClient_Welcome::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gabriel.ToClient.Welcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClient_Welcome::CopyFrom(const ToClient_Welcome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gabriel.ToClient.Welcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClient_Welcome::IsInitialized() const {
  return true;
}

void ToClient_Welcome::InternalSwap(ToClient_Welcome* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sources_consumed_.InternalSwap(&other->sources_consumed_);
  swap(num_tokens_per_source_, other->num_tokens_per_source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToClient_Welcome::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ToClient_Response::InitAsDefaultInstance() {
  ::gabriel::_ToClient_Response_default_instance_._instance.get_mutable()->result_wrapper_ = const_cast< ::gabriel::ResultWrapper*>(
      ::gabriel::ResultWrapper::internal_default_instance());
}
class ToClient_Response::_Internal {
 public:
  static const ::gabriel::ResultWrapper& result_wrapper(const ToClient_Response* msg);
};

const ::gabriel::ResultWrapper&
ToClient_Response::_Internal::result_wrapper(const ToClient_Response* msg) {
  return *msg->result_wrapper_;
}
ToClient_Response::ToClient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gabriel.ToClient.Response)
}
ToClient_Response::ToClient_Response(const ToClient_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_name().empty()) {
    source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source_name(),
      GetArena());
  }
  if (from._internal_has_result_wrapper()) {
    result_wrapper_ = new ::gabriel::ResultWrapper(*from.result_wrapper_);
  } else {
    result_wrapper_ = nullptr;
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_token_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(return_token_));
  // @@protoc_insertion_point(copy_constructor:gabriel.ToClient.Response)
}

void ToClient_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ToClient_Response_gabriel_2eproto.base);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_wrapper_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_token_) -
      reinterpret_cast<char*>(&result_wrapper_)) + sizeof(return_token_));
}

ToClient_Response::~ToClient_Response() {
  // @@protoc_insertion_point(destructor:gabriel.ToClient.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToClient_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_wrapper_;
}

void ToClient_Response::ArenaDtor(void* object) {
  ToClient_Response* _this = reinterpret_cast< ToClient_Response* >(object);
  (void)_this;
}
void ToClient_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToClient_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToClient_Response& ToClient_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ToClient_Response_gabriel_2eproto.base);
  return *internal_default_instance();
}


void ToClient_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:gabriel.ToClient.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && result_wrapper_ != nullptr) {
    delete result_wrapper_;
  }
  result_wrapper_ = nullptr;
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_token_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(return_token_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToClient_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string source_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gabriel.ToClient.Response.source_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool return_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          return_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gabriel.ResultWrapper result_wrapper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToClient_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gabriel.ToClient.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_name().data(), static_cast<int>(this->_internal_source_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gabriel.ToClient.Response.source_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_name(), target);
  }

  // int64 frame_id = 2;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_frame_id(), target);
  }

  // bool return_token = 3;
  if (this->return_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_return_token(), target);
  }

  // .gabriel.ResultWrapper result_wrapper = 4;
  if (this->has_result_wrapper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::result_wrapper(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gabriel.ToClient.Response)
  return target;
}

size_t ToClient_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gabriel.ToClient.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_name());
  }

  // .gabriel.ResultWrapper result_wrapper = 4;
  if (this->has_result_wrapper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_wrapper_);
  }

  // int64 frame_id = 2;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_frame_id());
  }

  // bool return_token = 3;
  if (this->return_token() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToClient_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gabriel.ToClient.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const ToClient_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToClient_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gabriel.ToClient.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gabriel.ToClient.Response)
    MergeFrom(*source);
  }
}

void ToClient_Response::MergeFrom(const ToClient_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gabriel.ToClient.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_name().size() > 0) {
    _internal_set_source_name(from._internal_source_name());
  }
  if (from.has_result_wrapper()) {
    _internal_mutable_result_wrapper()->::gabriel::ResultWrapper::MergeFrom(from._internal_result_wrapper());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.return_token() != 0) {
    _internal_set_return_token(from._internal_return_token());
  }
}

void ToClient_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gabriel.ToClient.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClient_Response::CopyFrom(const ToClient_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gabriel.ToClient.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClient_Response::IsInitialized() const {
  return true;
}

void ToClient_Response::InternalSwap(ToClient_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_name_.Swap(&other->source_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToClient_Response, return_token_)
      + sizeof(ToClient_Response::return_token_)
      - PROTOBUF_FIELD_OFFSET(ToClient_Response, result_wrapper_)>(
          reinterpret_cast<char*>(&result_wrapper_),
          reinterpret_cast<char*>(&other->result_wrapper_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToClient_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ToClient::InitAsDefaultInstance() {
  ::gabriel::_ToClient_default_instance_.welcome_ = const_cast< ::gabriel::ToClient_Welcome*>(
      ::gabriel::ToClient_Welcome::internal_default_instance());
  ::gabriel::_ToClient_default_instance_.response_ = const_cast< ::gabriel::ToClient_Response*>(
      ::gabriel::ToClient_Response::internal_default_instance());
}
class ToClient::_Internal {
 public:
  static const ::gabriel::ToClient_Welcome& welcome(const ToClient* msg);
  static const ::gabriel::ToClient_Response& response(const ToClient* msg);
};

const ::gabriel::ToClient_Welcome&
ToClient::_Internal::welcome(const ToClient* msg) {
  return *msg->welcome_or_response_.welcome_;
}
const ::gabriel::ToClient_Response&
ToClient::_Internal::response(const ToClient* msg) {
  return *msg->welcome_or_response_.response_;
}
void ToClient::set_allocated_welcome(::gabriel::ToClient_Welcome* welcome) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_welcome_or_response();
  if (welcome) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(welcome);
    if (message_arena != submessage_arena) {
      welcome = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, welcome, submessage_arena);
    }
    set_has_welcome();
    welcome_or_response_.welcome_ = welcome;
  }
  // @@protoc_insertion_point(field_set_allocated:gabriel.ToClient.welcome)
}
void ToClient::set_allocated_response(::gabriel::ToClient_Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_welcome_or_response();
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    set_has_response();
    welcome_or_response_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:gabriel.ToClient.response)
}
ToClient::ToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gabriel.ToClient)
}
ToClient::ToClient(const ToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_welcome_or_response();
  switch (from.welcome_or_response_case()) {
    case kWelcome: {
      _internal_mutable_welcome()->::gabriel::ToClient_Welcome::MergeFrom(from._internal_welcome());
      break;
    }
    case kResponse: {
      _internal_mutable_response()->::gabriel::ToClient_Response::MergeFrom(from._internal_response());
      break;
    }
    case WELCOME_OR_RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gabriel.ToClient)
}

void ToClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ToClient_gabriel_2eproto.base);
  clear_has_welcome_or_response();
}

ToClient::~ToClient() {
  // @@protoc_insertion_point(destructor:gabriel.ToClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_welcome_or_response()) {
    clear_welcome_or_response();
  }
}

void ToClient::ArenaDtor(void* object) {
  ToClient* _this = reinterpret_cast< ToClient* >(object);
  (void)_this;
}
void ToClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToClient& ToClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ToClient_gabriel_2eproto.base);
  return *internal_default_instance();
}


void ToClient::clear_welcome_or_response() {
// @@protoc_insertion_point(one_of_clear_start:gabriel.ToClient)
  switch (welcome_or_response_case()) {
    case kWelcome: {
      if (GetArena() == nullptr) {
        delete welcome_or_response_.welcome_;
      }
      break;
    }
    case kResponse: {
      if (GetArena() == nullptr) {
        delete welcome_or_response_.response_;
      }
      break;
    }
    case WELCOME_OR_RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WELCOME_OR_RESPONSE_NOT_SET;
}


void ToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:gabriel.ToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_welcome_or_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gabriel.ToClient.Welcome welcome = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_welcome(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gabriel.ToClient.Response response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gabriel.ToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gabriel.ToClient.Welcome welcome = 1;
  if (_internal_has_welcome()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::welcome(this), target, stream);
  }

  // .gabriel.ToClient.Response response = 2;
  if (_internal_has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gabriel.ToClient)
  return target;
}

size_t ToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gabriel.ToClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (welcome_or_response_case()) {
    // .gabriel.ToClient.Welcome welcome = 1;
    case kWelcome: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *welcome_or_response_.welcome_);
      break;
    }
    // .gabriel.ToClient.Response response = 2;
    case kResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *welcome_or_response_.response_);
      break;
    }
    case WELCOME_OR_RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gabriel.ToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const ToClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gabriel.ToClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gabriel.ToClient)
    MergeFrom(*source);
  }
}

void ToClient::MergeFrom(const ToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gabriel.ToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.welcome_or_response_case()) {
    case kWelcome: {
      _internal_mutable_welcome()->::gabriel::ToClient_Welcome::MergeFrom(from._internal_welcome());
      break;
    }
    case kResponse: {
      _internal_mutable_response()->::gabriel::ToClient_Response::MergeFrom(from._internal_response());
      break;
    }
    case WELCOME_OR_RESPONSE_NOT_SET: {
      break;
    }
  }
}

void ToClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gabriel.ToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClient::CopyFrom(const ToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gabriel.ToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClient::IsInitialized() const {
  return true;
}

void ToClient::InternalSwap(ToClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(welcome_or_response_, other->welcome_or_response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FromStandaloneEngine_Welcome::InitAsDefaultInstance() {
}
class FromStandaloneEngine_Welcome::_Internal {
 public:
};

FromStandaloneEngine_Welcome::FromStandaloneEngine_Welcome(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gabriel.FromStandaloneEngine.Welcome)
}
FromStandaloneEngine_Welcome::FromStandaloneEngine_Welcome(const FromStandaloneEngine_Welcome& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_name().empty()) {
    source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source_name(),
      GetArena());
  }
  all_responses_required_ = from.all_responses_required_;
  // @@protoc_insertion_point(copy_constructor:gabriel.FromStandaloneEngine.Welcome)
}

void FromStandaloneEngine_Welcome::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FromStandaloneEngine_Welcome_gabriel_2eproto.base);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  all_responses_required_ = false;
}

FromStandaloneEngine_Welcome::~FromStandaloneEngine_Welcome() {
  // @@protoc_insertion_point(destructor:gabriel.FromStandaloneEngine.Welcome)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FromStandaloneEngine_Welcome::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FromStandaloneEngine_Welcome::ArenaDtor(void* object) {
  FromStandaloneEngine_Welcome* _this = reinterpret_cast< FromStandaloneEngine_Welcome* >(object);
  (void)_this;
}
void FromStandaloneEngine_Welcome::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FromStandaloneEngine_Welcome::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FromStandaloneEngine_Welcome& FromStandaloneEngine_Welcome::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FromStandaloneEngine_Welcome_gabriel_2eproto.base);
  return *internal_default_instance();
}


void FromStandaloneEngine_Welcome::Clear() {
// @@protoc_insertion_point(message_clear_start:gabriel.FromStandaloneEngine.Welcome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  all_responses_required_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FromStandaloneEngine_Welcome::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string source_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gabriel.FromStandaloneEngine.Welcome.source_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool all_responses_required = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          all_responses_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FromStandaloneEngine_Welcome::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gabriel.FromStandaloneEngine.Welcome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_name().data(), static_cast<int>(this->_internal_source_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gabriel.FromStandaloneEngine.Welcome.source_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_name(), target);
  }

  // bool all_responses_required = 2;
  if (this->all_responses_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_all_responses_required(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gabriel.FromStandaloneEngine.Welcome)
  return target;
}

size_t FromStandaloneEngine_Welcome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gabriel.FromStandaloneEngine.Welcome)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_name());
  }

  // bool all_responses_required = 2;
  if (this->all_responses_required() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FromStandaloneEngine_Welcome::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gabriel.FromStandaloneEngine.Welcome)
  GOOGLE_DCHECK_NE(&from, this);
  const FromStandaloneEngine_Welcome* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FromStandaloneEngine_Welcome>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gabriel.FromStandaloneEngine.Welcome)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gabriel.FromStandaloneEngine.Welcome)
    MergeFrom(*source);
  }
}

void FromStandaloneEngine_Welcome::MergeFrom(const FromStandaloneEngine_Welcome& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gabriel.FromStandaloneEngine.Welcome)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_name().size() > 0) {
    _internal_set_source_name(from._internal_source_name());
  }
  if (from.all_responses_required() != 0) {
    _internal_set_all_responses_required(from._internal_all_responses_required());
  }
}

void FromStandaloneEngine_Welcome::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gabriel.FromStandaloneEngine.Welcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FromStandaloneEngine_Welcome::CopyFrom(const FromStandaloneEngine_Welcome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gabriel.FromStandaloneEngine.Welcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FromStandaloneEngine_Welcome::IsInitialized() const {
  return true;
}

void FromStandaloneEngine_Welcome::InternalSwap(FromStandaloneEngine_Welcome* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_name_.Swap(&other->source_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(all_responses_required_, other->all_responses_required_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FromStandaloneEngine_Welcome::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FromStandaloneEngine::InitAsDefaultInstance() {
  ::gabriel::_FromStandaloneEngine_default_instance_.welcome_ = const_cast< ::gabriel::FromStandaloneEngine_Welcome*>(
      ::gabriel::FromStandaloneEngine_Welcome::internal_default_instance());
  ::gabriel::_FromStandaloneEngine_default_instance_.result_wrapper_ = const_cast< ::gabriel::ResultWrapper*>(
      ::gabriel::ResultWrapper::internal_default_instance());
}
class FromStandaloneEngine::_Internal {
 public:
  static const ::gabriel::FromStandaloneEngine_Welcome& welcome(const FromStandaloneEngine* msg);
  static const ::gabriel::ResultWrapper& result_wrapper(const FromStandaloneEngine* msg);
};

const ::gabriel::FromStandaloneEngine_Welcome&
FromStandaloneEngine::_Internal::welcome(const FromStandaloneEngine* msg) {
  return *msg->welcome_or_result_wrapper_.welcome_;
}
const ::gabriel::ResultWrapper&
FromStandaloneEngine::_Internal::result_wrapper(const FromStandaloneEngine* msg) {
  return *msg->welcome_or_result_wrapper_.result_wrapper_;
}
void FromStandaloneEngine::set_allocated_welcome(::gabriel::FromStandaloneEngine_Welcome* welcome) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_welcome_or_result_wrapper();
  if (welcome) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(welcome);
    if (message_arena != submessage_arena) {
      welcome = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, welcome, submessage_arena);
    }
    set_has_welcome();
    welcome_or_result_wrapper_.welcome_ = welcome;
  }
  // @@protoc_insertion_point(field_set_allocated:gabriel.FromStandaloneEngine.welcome)
}
void FromStandaloneEngine::set_allocated_result_wrapper(::gabriel::ResultWrapper* result_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_welcome_or_result_wrapper();
  if (result_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result_wrapper);
    if (message_arena != submessage_arena) {
      result_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_wrapper, submessage_arena);
    }
    set_has_result_wrapper();
    welcome_or_result_wrapper_.result_wrapper_ = result_wrapper;
  }
  // @@protoc_insertion_point(field_set_allocated:gabriel.FromStandaloneEngine.result_wrapper)
}
FromStandaloneEngine::FromStandaloneEngine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gabriel.FromStandaloneEngine)
}
FromStandaloneEngine::FromStandaloneEngine(const FromStandaloneEngine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_welcome_or_result_wrapper();
  switch (from.welcome_or_result_wrapper_case()) {
    case kWelcome: {
      _internal_mutable_welcome()->::gabriel::FromStandaloneEngine_Welcome::MergeFrom(from._internal_welcome());
      break;
    }
    case kResultWrapper: {
      _internal_mutable_result_wrapper()->::gabriel::ResultWrapper::MergeFrom(from._internal_result_wrapper());
      break;
    }
    case WELCOME_OR_RESULT_WRAPPER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gabriel.FromStandaloneEngine)
}

void FromStandaloneEngine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FromStandaloneEngine_gabriel_2eproto.base);
  clear_has_welcome_or_result_wrapper();
}

FromStandaloneEngine::~FromStandaloneEngine() {
  // @@protoc_insertion_point(destructor:gabriel.FromStandaloneEngine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FromStandaloneEngine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_welcome_or_result_wrapper()) {
    clear_welcome_or_result_wrapper();
  }
}

void FromStandaloneEngine::ArenaDtor(void* object) {
  FromStandaloneEngine* _this = reinterpret_cast< FromStandaloneEngine* >(object);
  (void)_this;
}
void FromStandaloneEngine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FromStandaloneEngine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FromStandaloneEngine& FromStandaloneEngine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FromStandaloneEngine_gabriel_2eproto.base);
  return *internal_default_instance();
}


void FromStandaloneEngine::clear_welcome_or_result_wrapper() {
// @@protoc_insertion_point(one_of_clear_start:gabriel.FromStandaloneEngine)
  switch (welcome_or_result_wrapper_case()) {
    case kWelcome: {
      if (GetArena() == nullptr) {
        delete welcome_or_result_wrapper_.welcome_;
      }
      break;
    }
    case kResultWrapper: {
      if (GetArena() == nullptr) {
        delete welcome_or_result_wrapper_.result_wrapper_;
      }
      break;
    }
    case WELCOME_OR_RESULT_WRAPPER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WELCOME_OR_RESULT_WRAPPER_NOT_SET;
}


void FromStandaloneEngine::Clear() {
// @@protoc_insertion_point(message_clear_start:gabriel.FromStandaloneEngine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_welcome_or_result_wrapper();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FromStandaloneEngine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gabriel.FromStandaloneEngine.Welcome welcome = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_welcome(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gabriel.ResultWrapper result_wrapper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FromStandaloneEngine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gabriel.FromStandaloneEngine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gabriel.FromStandaloneEngine.Welcome welcome = 1;
  if (_internal_has_welcome()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::welcome(this), target, stream);
  }

  // .gabriel.ResultWrapper result_wrapper = 2;
  if (_internal_has_result_wrapper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result_wrapper(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gabriel.FromStandaloneEngine)
  return target;
}

size_t FromStandaloneEngine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gabriel.FromStandaloneEngine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (welcome_or_result_wrapper_case()) {
    // .gabriel.FromStandaloneEngine.Welcome welcome = 1;
    case kWelcome: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *welcome_or_result_wrapper_.welcome_);
      break;
    }
    // .gabriel.ResultWrapper result_wrapper = 2;
    case kResultWrapper: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *welcome_or_result_wrapper_.result_wrapper_);
      break;
    }
    case WELCOME_OR_RESULT_WRAPPER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FromStandaloneEngine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gabriel.FromStandaloneEngine)
  GOOGLE_DCHECK_NE(&from, this);
  const FromStandaloneEngine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FromStandaloneEngine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gabriel.FromStandaloneEngine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gabriel.FromStandaloneEngine)
    MergeFrom(*source);
  }
}

void FromStandaloneEngine::MergeFrom(const FromStandaloneEngine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gabriel.FromStandaloneEngine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.welcome_or_result_wrapper_case()) {
    case kWelcome: {
      _internal_mutable_welcome()->::gabriel::FromStandaloneEngine_Welcome::MergeFrom(from._internal_welcome());
      break;
    }
    case kResultWrapper: {
      _internal_mutable_result_wrapper()->::gabriel::ResultWrapper::MergeFrom(from._internal_result_wrapper());
      break;
    }
    case WELCOME_OR_RESULT_WRAPPER_NOT_SET: {
      break;
    }
  }
}

void FromStandaloneEngine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gabriel.FromStandaloneEngine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FromStandaloneEngine::CopyFrom(const FromStandaloneEngine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gabriel.FromStandaloneEngine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FromStandaloneEngine::IsInitialized() const {
  return true;
}

void FromStandaloneEngine::InternalSwap(FromStandaloneEngine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(welcome_or_result_wrapper_, other->welcome_or_result_wrapper_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FromStandaloneEngine::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gabriel
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gabriel::InputFrame* Arena::CreateMaybeMessage< ::gabriel::InputFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gabriel::InputFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::gabriel::FromClient* Arena::CreateMaybeMessage< ::gabriel::FromClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gabriel::FromClient >(arena);
}
template<> PROTOBUF_NOINLINE ::gabriel::ResultWrapper_Result* Arena::CreateMaybeMessage< ::gabriel::ResultWrapper_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gabriel::ResultWrapper_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::gabriel::ResultWrapper_StringValue* Arena::CreateMaybeMessage< ::gabriel::ResultWrapper_StringValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gabriel::ResultWrapper_StringValue >(arena);
}
template<> PROTOBUF_NOINLINE ::gabriel::ResultWrapper* Arena::CreateMaybeMessage< ::gabriel::ResultWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gabriel::ResultWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::gabriel::ToClient_Welcome* Arena::CreateMaybeMessage< ::gabriel::ToClient_Welcome >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gabriel::ToClient_Welcome >(arena);
}
template<> PROTOBUF_NOINLINE ::gabriel::ToClient_Response* Arena::CreateMaybeMessage< ::gabriel::ToClient_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gabriel::ToClient_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::gabriel::ToClient* Arena::CreateMaybeMessage< ::gabriel::ToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gabriel::ToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::gabriel::FromStandaloneEngine_Welcome* Arena::CreateMaybeMessage< ::gabriel::FromStandaloneEngine_Welcome >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gabriel::FromStandaloneEngine_Welcome >(arena);
}
template<> PROTOBUF_NOINLINE ::gabriel::FromStandaloneEngine* Arena::CreateMaybeMessage< ::gabriel::FromStandaloneEngine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gabriel::FromStandaloneEngine >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
