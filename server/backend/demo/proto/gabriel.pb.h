// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gabriel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gabriel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gabriel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gabriel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gabriel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gabriel_2eproto;
namespace gabriel {
class FromClient;
class FromClientDefaultTypeInternal;
extern FromClientDefaultTypeInternal _FromClient_default_instance_;
class FromStandaloneEngine;
class FromStandaloneEngineDefaultTypeInternal;
extern FromStandaloneEngineDefaultTypeInternal _FromStandaloneEngine_default_instance_;
class FromStandaloneEngine_Welcome;
class FromStandaloneEngine_WelcomeDefaultTypeInternal;
extern FromStandaloneEngine_WelcomeDefaultTypeInternal _FromStandaloneEngine_Welcome_default_instance_;
class InputFrame;
class InputFrameDefaultTypeInternal;
extern InputFrameDefaultTypeInternal _InputFrame_default_instance_;
class ResultWrapper;
class ResultWrapperDefaultTypeInternal;
extern ResultWrapperDefaultTypeInternal _ResultWrapper_default_instance_;
class ResultWrapper_Result;
class ResultWrapper_ResultDefaultTypeInternal;
extern ResultWrapper_ResultDefaultTypeInternal _ResultWrapper_Result_default_instance_;
class ResultWrapper_StringValue;
class ResultWrapper_StringValueDefaultTypeInternal;
extern ResultWrapper_StringValueDefaultTypeInternal _ResultWrapper_StringValue_default_instance_;
class ToClient;
class ToClientDefaultTypeInternal;
extern ToClientDefaultTypeInternal _ToClient_default_instance_;
class ToClient_Response;
class ToClient_ResponseDefaultTypeInternal;
extern ToClient_ResponseDefaultTypeInternal _ToClient_Response_default_instance_;
class ToClient_Welcome;
class ToClient_WelcomeDefaultTypeInternal;
extern ToClient_WelcomeDefaultTypeInternal _ToClient_Welcome_default_instance_;
}  // namespace gabriel
PROTOBUF_NAMESPACE_OPEN
template<> ::gabriel::FromClient* Arena::CreateMaybeMessage<::gabriel::FromClient>(Arena*);
template<> ::gabriel::FromStandaloneEngine* Arena::CreateMaybeMessage<::gabriel::FromStandaloneEngine>(Arena*);
template<> ::gabriel::FromStandaloneEngine_Welcome* Arena::CreateMaybeMessage<::gabriel::FromStandaloneEngine_Welcome>(Arena*);
template<> ::gabriel::InputFrame* Arena::CreateMaybeMessage<::gabriel::InputFrame>(Arena*);
template<> ::gabriel::ResultWrapper* Arena::CreateMaybeMessage<::gabriel::ResultWrapper>(Arena*);
template<> ::gabriel::ResultWrapper_Result* Arena::CreateMaybeMessage<::gabriel::ResultWrapper_Result>(Arena*);
template<> ::gabriel::ResultWrapper_StringValue* Arena::CreateMaybeMessage<::gabriel::ResultWrapper_StringValue>(Arena*);
template<> ::gabriel::ToClient* Arena::CreateMaybeMessage<::gabriel::ToClient>(Arena*);
template<> ::gabriel::ToClient_Response* Arena::CreateMaybeMessage<::gabriel::ToClient_Response>(Arena*);
template<> ::gabriel::ToClient_Welcome* Arena::CreateMaybeMessage<::gabriel::ToClient_Welcome>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gabriel {

enum ResultWrapper_Status : int {
  ResultWrapper_Status_SUCCESS = 0,
  ResultWrapper_Status_UNSPECIFIED_ERROR = 1,
  ResultWrapper_Status_ENGINE_ERROR = 2,
  ResultWrapper_Status_WRONG_INPUT_FORMAT = 3,
  ResultWrapper_Status_NO_ENGINE_FOR_SOURCE = 4,
  ResultWrapper_Status_NO_TOKENS = 5,
  ResultWrapper_Status_SERVER_DROPPED_FRAME = 6,
  ResultWrapper_Status_ResultWrapper_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResultWrapper_Status_ResultWrapper_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResultWrapper_Status_IsValid(int value);
constexpr ResultWrapper_Status ResultWrapper_Status_Status_MIN = ResultWrapper_Status_SUCCESS;
constexpr ResultWrapper_Status ResultWrapper_Status_Status_MAX = ResultWrapper_Status_SERVER_DROPPED_FRAME;
constexpr int ResultWrapper_Status_Status_ARRAYSIZE = ResultWrapper_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultWrapper_Status_descriptor();
template<typename T>
inline const std::string& ResultWrapper_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResultWrapper_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResultWrapper_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResultWrapper_Status_descriptor(), enum_t_value);
}
inline bool ResultWrapper_Status_Parse(
    const std::string& name, ResultWrapper_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResultWrapper_Status>(
    ResultWrapper_Status_descriptor(), name, value);
}
enum PayloadType : int {
  IMAGE = 0,
  VIDEO = 1,
  AUDIO = 2,
  IMU = 3,
  TEXT = 4,
  ANIMATION = 5,
  OTHER = 6,
  PayloadType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PayloadType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PayloadType_IsValid(int value);
constexpr PayloadType PayloadType_MIN = IMAGE;
constexpr PayloadType PayloadType_MAX = OTHER;
constexpr int PayloadType_ARRAYSIZE = PayloadType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PayloadType_descriptor();
template<typename T>
inline const std::string& PayloadType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PayloadType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PayloadType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PayloadType_descriptor(), enum_t_value);
}
inline bool PayloadType_Parse(
    const std::string& name, PayloadType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PayloadType>(
    PayloadType_descriptor(), name, value);
}
// ===================================================================

class InputFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gabriel.InputFrame) */ {
 public:
  inline InputFrame() : InputFrame(nullptr) {};
  virtual ~InputFrame();

  InputFrame(const InputFrame& from);
  InputFrame(InputFrame&& from) noexcept
    : InputFrame() {
    *this = ::std::move(from);
  }

  inline InputFrame& operator=(const InputFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputFrame& operator=(InputFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputFrame* internal_default_instance() {
    return reinterpret_cast<const InputFrame*>(
               &_InputFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputFrame& a, InputFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(InputFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputFrame* New() const final {
    return CreateMaybeMessage<InputFrame>(nullptr);
  }

  InputFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputFrame& from);
  void MergeFrom(const InputFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gabriel.InputFrame";
  }
  protected:
  explicit InputFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gabriel_2eproto);
    return ::descriptor_table_gabriel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadsFieldNumber = 2,
    kExtrasFieldNumber = 3,
    kPayloadTypeFieldNumber = 1,
  };
  // repeated bytes payloads = 2;
  int payloads_size() const;
  private:
  int _internal_payloads_size() const;
  public:
  void clear_payloads();
  const std::string& payloads(int index) const;
  std::string* mutable_payloads(int index);
  void set_payloads(int index, const std::string& value);
  void set_payloads(int index, std::string&& value);
  void set_payloads(int index, const char* value);
  void set_payloads(int index, const void* value, size_t size);
  std::string* add_payloads();
  void add_payloads(const std::string& value);
  void add_payloads(std::string&& value);
  void add_payloads(const char* value);
  void add_payloads(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& payloads() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_payloads();
  private:
  const std::string& _internal_payloads(int index) const;
  std::string* _internal_add_payloads();
  public:

  // .google.protobuf.Any extras = 3;
  bool has_extras() const;
  private:
  bool _internal_has_extras() const;
  public:
  void clear_extras();
  const PROTOBUF_NAMESPACE_ID::Any& extras() const;
  PROTOBUF_NAMESPACE_ID::Any* release_extras();
  PROTOBUF_NAMESPACE_ID::Any* mutable_extras();
  void set_allocated_extras(PROTOBUF_NAMESPACE_ID::Any* extras);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_extras() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_extras();
  public:
  void unsafe_arena_set_allocated_extras(
      PROTOBUF_NAMESPACE_ID::Any* extras);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_extras();

  // .gabriel.PayloadType payload_type = 1;
  void clear_payload_type();
  ::gabriel::PayloadType payload_type() const;
  void set_payload_type(::gabriel::PayloadType value);
  private:
  ::gabriel::PayloadType _internal_payload_type() const;
  void _internal_set_payload_type(::gabriel::PayloadType value);
  public:

  // @@protoc_insertion_point(class_scope:gabriel.InputFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> payloads_;
  PROTOBUF_NAMESPACE_ID::Any* extras_;
  int payload_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gabriel_2eproto;
};
// -------------------------------------------------------------------

class FromClient PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gabriel.FromClient) */ {
 public:
  inline FromClient() : FromClient(nullptr) {};
  virtual ~FromClient();

  FromClient(const FromClient& from);
  FromClient(FromClient&& from) noexcept
    : FromClient() {
    *this = ::std::move(from);
  }

  inline FromClient& operator=(const FromClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline FromClient& operator=(FromClient&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FromClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FromClient* internal_default_instance() {
    return reinterpret_cast<const FromClient*>(
               &_FromClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FromClient& a, FromClient& b) {
    a.Swap(&b);
  }
  inline void Swap(FromClient* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FromClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FromClient* New() const final {
    return CreateMaybeMessage<FromClient>(nullptr);
  }

  FromClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FromClient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FromClient& from);
  void MergeFrom(const FromClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FromClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gabriel.FromClient";
  }
  protected:
  explicit FromClient(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gabriel_2eproto);
    return ::descriptor_table_gabriel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceNameFieldNumber = 2,
    kInputFrameFieldNumber = 3,
    kFrameIdFieldNumber = 1,
  };
  // string source_name = 2;
  void clear_source_name();
  const std::string& source_name() const;
  void set_source_name(const std::string& value);
  void set_source_name(std::string&& value);
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  std::string* mutable_source_name();
  std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_name(
      std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // .gabriel.InputFrame input_frame = 3;
  bool has_input_frame() const;
  private:
  bool _internal_has_input_frame() const;
  public:
  void clear_input_frame();
  const ::gabriel::InputFrame& input_frame() const;
  ::gabriel::InputFrame* release_input_frame();
  ::gabriel::InputFrame* mutable_input_frame();
  void set_allocated_input_frame(::gabriel::InputFrame* input_frame);
  private:
  const ::gabriel::InputFrame& _internal_input_frame() const;
  ::gabriel::InputFrame* _internal_mutable_input_frame();
  public:
  void unsafe_arena_set_allocated_input_frame(
      ::gabriel::InputFrame* input_frame);
  ::gabriel::InputFrame* unsafe_arena_release_input_frame();

  // int64 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:gabriel.FromClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::gabriel::InputFrame* input_frame_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gabriel_2eproto;
};
// -------------------------------------------------------------------

class ResultWrapper_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gabriel.ResultWrapper.Result) */ {
 public:
  inline ResultWrapper_Result() : ResultWrapper_Result(nullptr) {};
  virtual ~ResultWrapper_Result();

  ResultWrapper_Result(const ResultWrapper_Result& from);
  ResultWrapper_Result(ResultWrapper_Result&& from) noexcept
    : ResultWrapper_Result() {
    *this = ::std::move(from);
  }

  inline ResultWrapper_Result& operator=(const ResultWrapper_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultWrapper_Result& operator=(ResultWrapper_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultWrapper_Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultWrapper_Result* internal_default_instance() {
    return reinterpret_cast<const ResultWrapper_Result*>(
               &_ResultWrapper_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResultWrapper_Result& a, ResultWrapper_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultWrapper_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultWrapper_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultWrapper_Result* New() const final {
    return CreateMaybeMessage<ResultWrapper_Result>(nullptr);
  }

  ResultWrapper_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultWrapper_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultWrapper_Result& from);
  void MergeFrom(const ResultWrapper_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultWrapper_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gabriel.ResultWrapper.Result";
  }
  protected:
  explicit ResultWrapper_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gabriel_2eproto);
    return ::descriptor_table_gabriel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kPayloadTypeFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_payload(
      std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .gabriel.PayloadType payload_type = 1;
  void clear_payload_type();
  ::gabriel::PayloadType payload_type() const;
  void set_payload_type(::gabriel::PayloadType value);
  private:
  ::gabriel::PayloadType _internal_payload_type() const;
  void _internal_set_payload_type(::gabriel::PayloadType value);
  public:

  // @@protoc_insertion_point(class_scope:gabriel.ResultWrapper.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  int payload_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gabriel_2eproto;
};
// -------------------------------------------------------------------

class ResultWrapper_StringValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gabriel.ResultWrapper.StringValue) */ {
 public:
  inline ResultWrapper_StringValue() : ResultWrapper_StringValue(nullptr) {};
  virtual ~ResultWrapper_StringValue();

  ResultWrapper_StringValue(const ResultWrapper_StringValue& from);
  ResultWrapper_StringValue(ResultWrapper_StringValue&& from) noexcept
    : ResultWrapper_StringValue() {
    *this = ::std::move(from);
  }

  inline ResultWrapper_StringValue& operator=(const ResultWrapper_StringValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultWrapper_StringValue& operator=(ResultWrapper_StringValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultWrapper_StringValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultWrapper_StringValue* internal_default_instance() {
    return reinterpret_cast<const ResultWrapper_StringValue*>(
               &_ResultWrapper_StringValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResultWrapper_StringValue& a, ResultWrapper_StringValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultWrapper_StringValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultWrapper_StringValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultWrapper_StringValue* New() const final {
    return CreateMaybeMessage<ResultWrapper_StringValue>(nullptr);
  }

  ResultWrapper_StringValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultWrapper_StringValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultWrapper_StringValue& from);
  void MergeFrom(const ResultWrapper_StringValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultWrapper_StringValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gabriel.ResultWrapper.StringValue";
  }
  protected:
  explicit ResultWrapper_StringValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gabriel_2eproto);
    return ::descriptor_table_gabriel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:gabriel.ResultWrapper.StringValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gabriel_2eproto;
};
// -------------------------------------------------------------------

class ResultWrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gabriel.ResultWrapper) */ {
 public:
  inline ResultWrapper() : ResultWrapper(nullptr) {};
  virtual ~ResultWrapper();

  ResultWrapper(const ResultWrapper& from);
  ResultWrapper(ResultWrapper&& from) noexcept
    : ResultWrapper() {
    *this = ::std::move(from);
  }

  inline ResultWrapper& operator=(const ResultWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultWrapper& operator=(ResultWrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultWrapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultWrapper* internal_default_instance() {
    return reinterpret_cast<const ResultWrapper*>(
               &_ResultWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResultWrapper& a, ResultWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultWrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultWrapper* New() const final {
    return CreateMaybeMessage<ResultWrapper>(nullptr);
  }

  ResultWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultWrapper& from);
  void MergeFrom(const ResultWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gabriel.ResultWrapper";
  }
  protected:
  explicit ResultWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gabriel_2eproto);
    return ::descriptor_table_gabriel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResultWrapper_Result Result;
  typedef ResultWrapper_StringValue StringValue;

  typedef ResultWrapper_Status Status;
  static constexpr Status SUCCESS =
    ResultWrapper_Status_SUCCESS;
  static constexpr Status UNSPECIFIED_ERROR =
    ResultWrapper_Status_UNSPECIFIED_ERROR;
  static constexpr Status ENGINE_ERROR =
    ResultWrapper_Status_ENGINE_ERROR;
  static constexpr Status WRONG_INPUT_FORMAT =
    ResultWrapper_Status_WRONG_INPUT_FORMAT;
  static constexpr Status NO_ENGINE_FOR_SOURCE =
    ResultWrapper_Status_NO_ENGINE_FOR_SOURCE;
  static constexpr Status NO_TOKENS =
    ResultWrapper_Status_NO_TOKENS;
  static constexpr Status SERVER_DROPPED_FRAME =
    ResultWrapper_Status_SERVER_DROPPED_FRAME;
  static inline bool Status_IsValid(int value) {
    return ResultWrapper_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ResultWrapper_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ResultWrapper_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ResultWrapper_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ResultWrapper_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ResultWrapper_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ResultWrapper_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kExtrasFieldNumber = 3,
    kResultProducerNameFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // repeated .gabriel.ResultWrapper.Result results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::gabriel::ResultWrapper_Result* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gabriel::ResultWrapper_Result >*
      mutable_results();
  private:
  const ::gabriel::ResultWrapper_Result& _internal_results(int index) const;
  ::gabriel::ResultWrapper_Result* _internal_add_results();
  public:
  const ::gabriel::ResultWrapper_Result& results(int index) const;
  ::gabriel::ResultWrapper_Result* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gabriel::ResultWrapper_Result >&
      results() const;

  // .google.protobuf.Any extras = 3;
  bool has_extras() const;
  private:
  bool _internal_has_extras() const;
  public:
  void clear_extras();
  const PROTOBUF_NAMESPACE_ID::Any& extras() const;
  PROTOBUF_NAMESPACE_ID::Any* release_extras();
  PROTOBUF_NAMESPACE_ID::Any* mutable_extras();
  void set_allocated_extras(PROTOBUF_NAMESPACE_ID::Any* extras);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_extras() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_extras();
  public:
  void unsafe_arena_set_allocated_extras(
      PROTOBUF_NAMESPACE_ID::Any* extras);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_extras();

  // .gabriel.ResultWrapper.StringValue result_producer_name = 4;
  bool has_result_producer_name() const;
  private:
  bool _internal_has_result_producer_name() const;
  public:
  void clear_result_producer_name();
  const ::gabriel::ResultWrapper_StringValue& result_producer_name() const;
  ::gabriel::ResultWrapper_StringValue* release_result_producer_name();
  ::gabriel::ResultWrapper_StringValue* mutable_result_producer_name();
  void set_allocated_result_producer_name(::gabriel::ResultWrapper_StringValue* result_producer_name);
  private:
  const ::gabriel::ResultWrapper_StringValue& _internal_result_producer_name() const;
  ::gabriel::ResultWrapper_StringValue* _internal_mutable_result_producer_name();
  public:
  void unsafe_arena_set_allocated_result_producer_name(
      ::gabriel::ResultWrapper_StringValue* result_producer_name);
  ::gabriel::ResultWrapper_StringValue* unsafe_arena_release_result_producer_name();

  // .gabriel.ResultWrapper.Status status = 1;
  void clear_status();
  ::gabriel::ResultWrapper_Status status() const;
  void set_status(::gabriel::ResultWrapper_Status value);
  private:
  ::gabriel::ResultWrapper_Status _internal_status() const;
  void _internal_set_status(::gabriel::ResultWrapper_Status value);
  public:

  // @@protoc_insertion_point(class_scope:gabriel.ResultWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gabriel::ResultWrapper_Result > results_;
  PROTOBUF_NAMESPACE_ID::Any* extras_;
  ::gabriel::ResultWrapper_StringValue* result_producer_name_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gabriel_2eproto;
};
// -------------------------------------------------------------------

class ToClient_Welcome PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gabriel.ToClient.Welcome) */ {
 public:
  inline ToClient_Welcome() : ToClient_Welcome(nullptr) {};
  virtual ~ToClient_Welcome();

  ToClient_Welcome(const ToClient_Welcome& from);
  ToClient_Welcome(ToClient_Welcome&& from) noexcept
    : ToClient_Welcome() {
    *this = ::std::move(from);
  }

  inline ToClient_Welcome& operator=(const ToClient_Welcome& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToClient_Welcome& operator=(ToClient_Welcome&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ToClient_Welcome& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToClient_Welcome* internal_default_instance() {
    return reinterpret_cast<const ToClient_Welcome*>(
               &_ToClient_Welcome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ToClient_Welcome& a, ToClient_Welcome& b) {
    a.Swap(&b);
  }
  inline void Swap(ToClient_Welcome* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToClient_Welcome* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToClient_Welcome* New() const final {
    return CreateMaybeMessage<ToClient_Welcome>(nullptr);
  }

  ToClient_Welcome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToClient_Welcome>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToClient_Welcome& from);
  void MergeFrom(const ToClient_Welcome& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToClient_Welcome* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gabriel.ToClient.Welcome";
  }
  protected:
  explicit ToClient_Welcome(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gabriel_2eproto);
    return ::descriptor_table_gabriel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcesConsumedFieldNumber = 1,
    kNumTokensPerSourceFieldNumber = 2,
  };
  // repeated string sources_consumed = 1;
  int sources_consumed_size() const;
  private:
  int _internal_sources_consumed_size() const;
  public:
  void clear_sources_consumed();
  const std::string& sources_consumed(int index) const;
  std::string* mutable_sources_consumed(int index);
  void set_sources_consumed(int index, const std::string& value);
  void set_sources_consumed(int index, std::string&& value);
  void set_sources_consumed(int index, const char* value);
  void set_sources_consumed(int index, const char* value, size_t size);
  std::string* add_sources_consumed();
  void add_sources_consumed(const std::string& value);
  void add_sources_consumed(std::string&& value);
  void add_sources_consumed(const char* value);
  void add_sources_consumed(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sources_consumed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sources_consumed();
  private:
  const std::string& _internal_sources_consumed(int index) const;
  std::string* _internal_add_sources_consumed();
  public:

  // int32 num_tokens_per_source = 2;
  void clear_num_tokens_per_source();
  ::PROTOBUF_NAMESPACE_ID::int32 num_tokens_per_source() const;
  void set_num_tokens_per_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_tokens_per_source() const;
  void _internal_set_num_tokens_per_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gabriel.ToClient.Welcome)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sources_consumed_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_tokens_per_source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gabriel_2eproto;
};
// -------------------------------------------------------------------

class ToClient_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gabriel.ToClient.Response) */ {
 public:
  inline ToClient_Response() : ToClient_Response(nullptr) {};
  virtual ~ToClient_Response();

  ToClient_Response(const ToClient_Response& from);
  ToClient_Response(ToClient_Response&& from) noexcept
    : ToClient_Response() {
    *this = ::std::move(from);
  }

  inline ToClient_Response& operator=(const ToClient_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToClient_Response& operator=(ToClient_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ToClient_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToClient_Response* internal_default_instance() {
    return reinterpret_cast<const ToClient_Response*>(
               &_ToClient_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ToClient_Response& a, ToClient_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(ToClient_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToClient_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToClient_Response* New() const final {
    return CreateMaybeMessage<ToClient_Response>(nullptr);
  }

  ToClient_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToClient_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToClient_Response& from);
  void MergeFrom(const ToClient_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToClient_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gabriel.ToClient.Response";
  }
  protected:
  explicit ToClient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gabriel_2eproto);
    return ::descriptor_table_gabriel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceNameFieldNumber = 1,
    kResultWrapperFieldNumber = 4,
    kFrameIdFieldNumber = 2,
    kReturnTokenFieldNumber = 3,
  };
  // string source_name = 1;
  void clear_source_name();
  const std::string& source_name() const;
  void set_source_name(const std::string& value);
  void set_source_name(std::string&& value);
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  std::string* mutable_source_name();
  std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_name(
      std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // .gabriel.ResultWrapper result_wrapper = 4;
  bool has_result_wrapper() const;
  private:
  bool _internal_has_result_wrapper() const;
  public:
  void clear_result_wrapper();
  const ::gabriel::ResultWrapper& result_wrapper() const;
  ::gabriel::ResultWrapper* release_result_wrapper();
  ::gabriel::ResultWrapper* mutable_result_wrapper();
  void set_allocated_result_wrapper(::gabriel::ResultWrapper* result_wrapper);
  private:
  const ::gabriel::ResultWrapper& _internal_result_wrapper() const;
  ::gabriel::ResultWrapper* _internal_mutable_result_wrapper();
  public:
  void unsafe_arena_set_allocated_result_wrapper(
      ::gabriel::ResultWrapper* result_wrapper);
  ::gabriel::ResultWrapper* unsafe_arena_release_result_wrapper();

  // int64 frame_id = 2;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool return_token = 3;
  void clear_return_token();
  bool return_token() const;
  void set_return_token(bool value);
  private:
  bool _internal_return_token() const;
  void _internal_set_return_token(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gabriel.ToClient.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::gabriel::ResultWrapper* result_wrapper_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_id_;
  bool return_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gabriel_2eproto;
};
// -------------------------------------------------------------------

class ToClient PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gabriel.ToClient) */ {
 public:
  inline ToClient() : ToClient(nullptr) {};
  virtual ~ToClient();

  ToClient(const ToClient& from);
  ToClient(ToClient&& from) noexcept
    : ToClient() {
    *this = ::std::move(from);
  }

  inline ToClient& operator=(const ToClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToClient& operator=(ToClient&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ToClient& default_instance();

  enum WelcomeOrResponseCase {
    kWelcome = 1,
    kResponse = 2,
    WELCOME_OR_RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToClient* internal_default_instance() {
    return reinterpret_cast<const ToClient*>(
               &_ToClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ToClient& a, ToClient& b) {
    a.Swap(&b);
  }
  inline void Swap(ToClient* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToClient* New() const final {
    return CreateMaybeMessage<ToClient>(nullptr);
  }

  ToClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToClient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToClient& from);
  void MergeFrom(const ToClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gabriel.ToClient";
  }
  protected:
  explicit ToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gabriel_2eproto);
    return ::descriptor_table_gabriel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ToClient_Welcome Welcome;
  typedef ToClient_Response Response;

  // accessors -------------------------------------------------------

  enum : int {
    kWelcomeFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .gabriel.ToClient.Welcome welcome = 1;
  bool has_welcome() const;
  private:
  bool _internal_has_welcome() const;
  public:
  void clear_welcome();
  const ::gabriel::ToClient_Welcome& welcome() const;
  ::gabriel::ToClient_Welcome* release_welcome();
  ::gabriel::ToClient_Welcome* mutable_welcome();
  void set_allocated_welcome(::gabriel::ToClient_Welcome* welcome);
  private:
  const ::gabriel::ToClient_Welcome& _internal_welcome() const;
  ::gabriel::ToClient_Welcome* _internal_mutable_welcome();
  public:
  void unsafe_arena_set_allocated_welcome(
      ::gabriel::ToClient_Welcome* welcome);
  ::gabriel::ToClient_Welcome* unsafe_arena_release_welcome();

  // .gabriel.ToClient.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::gabriel::ToClient_Response& response() const;
  ::gabriel::ToClient_Response* release_response();
  ::gabriel::ToClient_Response* mutable_response();
  void set_allocated_response(::gabriel::ToClient_Response* response);
  private:
  const ::gabriel::ToClient_Response& _internal_response() const;
  ::gabriel::ToClient_Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::gabriel::ToClient_Response* response);
  ::gabriel::ToClient_Response* unsafe_arena_release_response();

  void clear_welcome_or_response();
  WelcomeOrResponseCase welcome_or_response_case() const;
  // @@protoc_insertion_point(class_scope:gabriel.ToClient)
 private:
  class _Internal;
  void set_has_welcome();
  void set_has_response();

  inline bool has_welcome_or_response() const;
  inline void clear_has_welcome_or_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union WelcomeOrResponseUnion {
    WelcomeOrResponseUnion() {}
    ::gabriel::ToClient_Welcome* welcome_;
    ::gabriel::ToClient_Response* response_;
  } welcome_or_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_gabriel_2eproto;
};
// -------------------------------------------------------------------

class FromStandaloneEngine_Welcome PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gabriel.FromStandaloneEngine.Welcome) */ {
 public:
  inline FromStandaloneEngine_Welcome() : FromStandaloneEngine_Welcome(nullptr) {};
  virtual ~FromStandaloneEngine_Welcome();

  FromStandaloneEngine_Welcome(const FromStandaloneEngine_Welcome& from);
  FromStandaloneEngine_Welcome(FromStandaloneEngine_Welcome&& from) noexcept
    : FromStandaloneEngine_Welcome() {
    *this = ::std::move(from);
  }

  inline FromStandaloneEngine_Welcome& operator=(const FromStandaloneEngine_Welcome& from) {
    CopyFrom(from);
    return *this;
  }
  inline FromStandaloneEngine_Welcome& operator=(FromStandaloneEngine_Welcome&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FromStandaloneEngine_Welcome& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FromStandaloneEngine_Welcome* internal_default_instance() {
    return reinterpret_cast<const FromStandaloneEngine_Welcome*>(
               &_FromStandaloneEngine_Welcome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FromStandaloneEngine_Welcome& a, FromStandaloneEngine_Welcome& b) {
    a.Swap(&b);
  }
  inline void Swap(FromStandaloneEngine_Welcome* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FromStandaloneEngine_Welcome* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FromStandaloneEngine_Welcome* New() const final {
    return CreateMaybeMessage<FromStandaloneEngine_Welcome>(nullptr);
  }

  FromStandaloneEngine_Welcome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FromStandaloneEngine_Welcome>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FromStandaloneEngine_Welcome& from);
  void MergeFrom(const FromStandaloneEngine_Welcome& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FromStandaloneEngine_Welcome* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gabriel.FromStandaloneEngine.Welcome";
  }
  protected:
  explicit FromStandaloneEngine_Welcome(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gabriel_2eproto);
    return ::descriptor_table_gabriel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceNameFieldNumber = 1,
    kAllResponsesRequiredFieldNumber = 2,
  };
  // string source_name = 1;
  void clear_source_name();
  const std::string& source_name() const;
  void set_source_name(const std::string& value);
  void set_source_name(std::string&& value);
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  std::string* mutable_source_name();
  std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_name(
      std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // bool all_responses_required = 2;
  void clear_all_responses_required();
  bool all_responses_required() const;
  void set_all_responses_required(bool value);
  private:
  bool _internal_all_responses_required() const;
  void _internal_set_all_responses_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gabriel.FromStandaloneEngine.Welcome)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  bool all_responses_required_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gabriel_2eproto;
};
// -------------------------------------------------------------------

class FromStandaloneEngine PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gabriel.FromStandaloneEngine) */ {
 public:
  inline FromStandaloneEngine() : FromStandaloneEngine(nullptr) {};
  virtual ~FromStandaloneEngine();

  FromStandaloneEngine(const FromStandaloneEngine& from);
  FromStandaloneEngine(FromStandaloneEngine&& from) noexcept
    : FromStandaloneEngine() {
    *this = ::std::move(from);
  }

  inline FromStandaloneEngine& operator=(const FromStandaloneEngine& from) {
    CopyFrom(from);
    return *this;
  }
  inline FromStandaloneEngine& operator=(FromStandaloneEngine&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FromStandaloneEngine& default_instance();

  enum WelcomeOrResultWrapperCase {
    kWelcome = 1,
    kResultWrapper = 2,
    WELCOME_OR_RESULT_WRAPPER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FromStandaloneEngine* internal_default_instance() {
    return reinterpret_cast<const FromStandaloneEngine*>(
               &_FromStandaloneEngine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FromStandaloneEngine& a, FromStandaloneEngine& b) {
    a.Swap(&b);
  }
  inline void Swap(FromStandaloneEngine* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FromStandaloneEngine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FromStandaloneEngine* New() const final {
    return CreateMaybeMessage<FromStandaloneEngine>(nullptr);
  }

  FromStandaloneEngine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FromStandaloneEngine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FromStandaloneEngine& from);
  void MergeFrom(const FromStandaloneEngine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FromStandaloneEngine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gabriel.FromStandaloneEngine";
  }
  protected:
  explicit FromStandaloneEngine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gabriel_2eproto);
    return ::descriptor_table_gabriel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FromStandaloneEngine_Welcome Welcome;

  // accessors -------------------------------------------------------

  enum : int {
    kWelcomeFieldNumber = 1,
    kResultWrapperFieldNumber = 2,
  };
  // .gabriel.FromStandaloneEngine.Welcome welcome = 1;
  bool has_welcome() const;
  private:
  bool _internal_has_welcome() const;
  public:
  void clear_welcome();
  const ::gabriel::FromStandaloneEngine_Welcome& welcome() const;
  ::gabriel::FromStandaloneEngine_Welcome* release_welcome();
  ::gabriel::FromStandaloneEngine_Welcome* mutable_welcome();
  void set_allocated_welcome(::gabriel::FromStandaloneEngine_Welcome* welcome);
  private:
  const ::gabriel::FromStandaloneEngine_Welcome& _internal_welcome() const;
  ::gabriel::FromStandaloneEngine_Welcome* _internal_mutable_welcome();
  public:
  void unsafe_arena_set_allocated_welcome(
      ::gabriel::FromStandaloneEngine_Welcome* welcome);
  ::gabriel::FromStandaloneEngine_Welcome* unsafe_arena_release_welcome();

  // .gabriel.ResultWrapper result_wrapper = 2;
  bool has_result_wrapper() const;
  private:
  bool _internal_has_result_wrapper() const;
  public:
  void clear_result_wrapper();
  const ::gabriel::ResultWrapper& result_wrapper() const;
  ::gabriel::ResultWrapper* release_result_wrapper();
  ::gabriel::ResultWrapper* mutable_result_wrapper();
  void set_allocated_result_wrapper(::gabriel::ResultWrapper* result_wrapper);
  private:
  const ::gabriel::ResultWrapper& _internal_result_wrapper() const;
  ::gabriel::ResultWrapper* _internal_mutable_result_wrapper();
  public:
  void unsafe_arena_set_allocated_result_wrapper(
      ::gabriel::ResultWrapper* result_wrapper);
  ::gabriel::ResultWrapper* unsafe_arena_release_result_wrapper();

  void clear_welcome_or_result_wrapper();
  WelcomeOrResultWrapperCase welcome_or_result_wrapper_case() const;
  // @@protoc_insertion_point(class_scope:gabriel.FromStandaloneEngine)
 private:
  class _Internal;
  void set_has_welcome();
  void set_has_result_wrapper();

  inline bool has_welcome_or_result_wrapper() const;
  inline void clear_has_welcome_or_result_wrapper();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union WelcomeOrResultWrapperUnion {
    WelcomeOrResultWrapperUnion() {}
    ::gabriel::FromStandaloneEngine_Welcome* welcome_;
    ::gabriel::ResultWrapper* result_wrapper_;
  } welcome_or_result_wrapper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_gabriel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputFrame

// .gabriel.PayloadType payload_type = 1;
inline void InputFrame::clear_payload_type() {
  payload_type_ = 0;
}
inline ::gabriel::PayloadType InputFrame::_internal_payload_type() const {
  return static_cast< ::gabriel::PayloadType >(payload_type_);
}
inline ::gabriel::PayloadType InputFrame::payload_type() const {
  // @@protoc_insertion_point(field_get:gabriel.InputFrame.payload_type)
  return _internal_payload_type();
}
inline void InputFrame::_internal_set_payload_type(::gabriel::PayloadType value) {
  
  payload_type_ = value;
}
inline void InputFrame::set_payload_type(::gabriel::PayloadType value) {
  _internal_set_payload_type(value);
  // @@protoc_insertion_point(field_set:gabriel.InputFrame.payload_type)
}

// repeated bytes payloads = 2;
inline int InputFrame::_internal_payloads_size() const {
  return payloads_.size();
}
inline int InputFrame::payloads_size() const {
  return _internal_payloads_size();
}
inline void InputFrame::clear_payloads() {
  payloads_.Clear();
}
inline std::string* InputFrame::add_payloads() {
  // @@protoc_insertion_point(field_add_mutable:gabriel.InputFrame.payloads)
  return _internal_add_payloads();
}
inline const std::string& InputFrame::_internal_payloads(int index) const {
  return payloads_.Get(index);
}
inline const std::string& InputFrame::payloads(int index) const {
  // @@protoc_insertion_point(field_get:gabriel.InputFrame.payloads)
  return _internal_payloads(index);
}
inline std::string* InputFrame::mutable_payloads(int index) {
  // @@protoc_insertion_point(field_mutable:gabriel.InputFrame.payloads)
  return payloads_.Mutable(index);
}
inline void InputFrame::set_payloads(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gabriel.InputFrame.payloads)
  payloads_.Mutable(index)->assign(value);
}
inline void InputFrame::set_payloads(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gabriel.InputFrame.payloads)
  payloads_.Mutable(index)->assign(std::move(value));
}
inline void InputFrame::set_payloads(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  payloads_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gabriel.InputFrame.payloads)
}
inline void InputFrame::set_payloads(int index, const void* value, size_t size) {
  payloads_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gabriel.InputFrame.payloads)
}
inline std::string* InputFrame::_internal_add_payloads() {
  return payloads_.Add();
}
inline void InputFrame::add_payloads(const std::string& value) {
  payloads_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gabriel.InputFrame.payloads)
}
inline void InputFrame::add_payloads(std::string&& value) {
  payloads_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gabriel.InputFrame.payloads)
}
inline void InputFrame::add_payloads(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  payloads_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gabriel.InputFrame.payloads)
}
inline void InputFrame::add_payloads(const void* value, size_t size) {
  payloads_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gabriel.InputFrame.payloads)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InputFrame::payloads() const {
  // @@protoc_insertion_point(field_list:gabriel.InputFrame.payloads)
  return payloads_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InputFrame::mutable_payloads() {
  // @@protoc_insertion_point(field_mutable_list:gabriel.InputFrame.payloads)
  return &payloads_;
}

// .google.protobuf.Any extras = 3;
inline bool InputFrame::_internal_has_extras() const {
  return this != internal_default_instance() && extras_ != nullptr;
}
inline bool InputFrame::has_extras() const {
  return _internal_has_extras();
}
inline const PROTOBUF_NAMESPACE_ID::Any& InputFrame::_internal_extras() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = extras_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& InputFrame::extras() const {
  // @@protoc_insertion_point(field_get:gabriel.InputFrame.extras)
  return _internal_extras();
}
inline void InputFrame::unsafe_arena_set_allocated_extras(
    PROTOBUF_NAMESPACE_ID::Any* extras) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extras_);
  }
  extras_ = extras;
  if (extras) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gabriel.InputFrame.extras)
}
inline PROTOBUF_NAMESPACE_ID::Any* InputFrame::release_extras() {
  auto temp = unsafe_arena_release_extras();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* InputFrame::unsafe_arena_release_extras() {
  // @@protoc_insertion_point(field_release:gabriel.InputFrame.extras)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = extras_;
  extras_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* InputFrame::_internal_mutable_extras() {
  
  if (extras_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    extras_ = p;
  }
  return extras_;
}
inline PROTOBUF_NAMESPACE_ID::Any* InputFrame::mutable_extras() {
  // @@protoc_insertion_point(field_mutable:gabriel.InputFrame.extras)
  return _internal_mutable_extras();
}
inline void InputFrame::set_allocated_extras(PROTOBUF_NAMESPACE_ID::Any* extras) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extras_);
  }
  if (extras) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extras)->GetArena();
    if (message_arena != submessage_arena) {
      extras = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extras, submessage_arena);
    }
    
  } else {
    
  }
  extras_ = extras;
  // @@protoc_insertion_point(field_set_allocated:gabriel.InputFrame.extras)
}

// -------------------------------------------------------------------

// FromClient

// int64 frame_id = 1;
inline void FromClient::clear_frame_id() {
  frame_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FromClient::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FromClient::frame_id() const {
  // @@protoc_insertion_point(field_get:gabriel.FromClient.frame_id)
  return _internal_frame_id();
}
inline void FromClient::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frame_id_ = value;
}
inline void FromClient::set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:gabriel.FromClient.frame_id)
}

// string source_name = 2;
inline void FromClient::clear_source_name() {
  source_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FromClient::source_name() const {
  // @@protoc_insertion_point(field_get:gabriel.FromClient.source_name)
  return _internal_source_name();
}
inline void FromClient::set_source_name(const std::string& value) {
  _internal_set_source_name(value);
  // @@protoc_insertion_point(field_set:gabriel.FromClient.source_name)
}
inline std::string* FromClient::mutable_source_name() {
  // @@protoc_insertion_point(field_mutable:gabriel.FromClient.source_name)
  return _internal_mutable_source_name();
}
inline const std::string& FromClient::_internal_source_name() const {
  return source_name_.Get();
}
inline void FromClient::_internal_set_source_name(const std::string& value) {
  
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FromClient::set_source_name(std::string&& value) {
  
  source_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gabriel.FromClient.source_name)
}
inline void FromClient::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gabriel.FromClient.source_name)
}
inline void FromClient::set_source_name(const char* value,
    size_t size) {
  
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gabriel.FromClient.source_name)
}
inline std::string* FromClient::_internal_mutable_source_name() {
  
  return source_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FromClient::release_source_name() {
  // @@protoc_insertion_point(field_release:gabriel.FromClient.source_name)
  return source_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FromClient::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    
  } else {
    
  }
  source_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gabriel.FromClient.source_name)
}
inline std::string* FromClient::unsafe_arena_release_source_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gabriel.FromClient.source_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FromClient::unsafe_arena_set_allocated_source_name(
    std::string* source_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_name != nullptr) {
    
  } else {
    
  }
  source_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gabriel.FromClient.source_name)
}

// .gabriel.InputFrame input_frame = 3;
inline bool FromClient::_internal_has_input_frame() const {
  return this != internal_default_instance() && input_frame_ != nullptr;
}
inline bool FromClient::has_input_frame() const {
  return _internal_has_input_frame();
}
inline void FromClient::clear_input_frame() {
  if (GetArena() == nullptr && input_frame_ != nullptr) {
    delete input_frame_;
  }
  input_frame_ = nullptr;
}
inline const ::gabriel::InputFrame& FromClient::_internal_input_frame() const {
  const ::gabriel::InputFrame* p = input_frame_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gabriel::InputFrame*>(
      &::gabriel::_InputFrame_default_instance_);
}
inline const ::gabriel::InputFrame& FromClient::input_frame() const {
  // @@protoc_insertion_point(field_get:gabriel.FromClient.input_frame)
  return _internal_input_frame();
}
inline void FromClient::unsafe_arena_set_allocated_input_frame(
    ::gabriel::InputFrame* input_frame) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_frame_);
  }
  input_frame_ = input_frame;
  if (input_frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gabriel.FromClient.input_frame)
}
inline ::gabriel::InputFrame* FromClient::release_input_frame() {
  auto temp = unsafe_arena_release_input_frame();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gabriel::InputFrame* FromClient::unsafe_arena_release_input_frame() {
  // @@protoc_insertion_point(field_release:gabriel.FromClient.input_frame)
  
  ::gabriel::InputFrame* temp = input_frame_;
  input_frame_ = nullptr;
  return temp;
}
inline ::gabriel::InputFrame* FromClient::_internal_mutable_input_frame() {
  
  if (input_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::gabriel::InputFrame>(GetArena());
    input_frame_ = p;
  }
  return input_frame_;
}
inline ::gabriel::InputFrame* FromClient::mutable_input_frame() {
  // @@protoc_insertion_point(field_mutable:gabriel.FromClient.input_frame)
  return _internal_mutable_input_frame();
}
inline void FromClient::set_allocated_input_frame(::gabriel::InputFrame* input_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_frame_;
  }
  if (input_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input_frame);
    if (message_arena != submessage_arena) {
      input_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_frame, submessage_arena);
    }
    
  } else {
    
  }
  input_frame_ = input_frame;
  // @@protoc_insertion_point(field_set_allocated:gabriel.FromClient.input_frame)
}

// -------------------------------------------------------------------

// ResultWrapper_Result

// .gabriel.PayloadType payload_type = 1;
inline void ResultWrapper_Result::clear_payload_type() {
  payload_type_ = 0;
}
inline ::gabriel::PayloadType ResultWrapper_Result::_internal_payload_type() const {
  return static_cast< ::gabriel::PayloadType >(payload_type_);
}
inline ::gabriel::PayloadType ResultWrapper_Result::payload_type() const {
  // @@protoc_insertion_point(field_get:gabriel.ResultWrapper.Result.payload_type)
  return _internal_payload_type();
}
inline void ResultWrapper_Result::_internal_set_payload_type(::gabriel::PayloadType value) {
  
  payload_type_ = value;
}
inline void ResultWrapper_Result::set_payload_type(::gabriel::PayloadType value) {
  _internal_set_payload_type(value);
  // @@protoc_insertion_point(field_set:gabriel.ResultWrapper.Result.payload_type)
}

// bytes payload = 2;
inline void ResultWrapper_Result::clear_payload() {
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResultWrapper_Result::payload() const {
  // @@protoc_insertion_point(field_get:gabriel.ResultWrapper.Result.payload)
  return _internal_payload();
}
inline void ResultWrapper_Result::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:gabriel.ResultWrapper.Result.payload)
}
inline std::string* ResultWrapper_Result::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:gabriel.ResultWrapper.Result.payload)
  return _internal_mutable_payload();
}
inline const std::string& ResultWrapper_Result::_internal_payload() const {
  return payload_.Get();
}
inline void ResultWrapper_Result::_internal_set_payload(const std::string& value) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultWrapper_Result::set_payload(std::string&& value) {
  
  payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gabriel.ResultWrapper.Result.payload)
}
inline void ResultWrapper_Result::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gabriel.ResultWrapper.Result.payload)
}
inline void ResultWrapper_Result::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gabriel.ResultWrapper.Result.payload)
}
inline std::string* ResultWrapper_Result::_internal_mutable_payload() {
  
  return payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultWrapper_Result::release_payload() {
  // @@protoc_insertion_point(field_release:gabriel.ResultWrapper.Result.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultWrapper_Result::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gabriel.ResultWrapper.Result.payload)
}
inline std::string* ResultWrapper_Result::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gabriel.ResultWrapper.Result.payload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResultWrapper_Result::unsafe_arena_set_allocated_payload(
    std::string* payload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      payload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gabriel.ResultWrapper.Result.payload)
}

// -------------------------------------------------------------------

// ResultWrapper_StringValue

// string value = 1;
inline void ResultWrapper_StringValue::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResultWrapper_StringValue::value() const {
  // @@protoc_insertion_point(field_get:gabriel.ResultWrapper.StringValue.value)
  return _internal_value();
}
inline void ResultWrapper_StringValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:gabriel.ResultWrapper.StringValue.value)
}
inline std::string* ResultWrapper_StringValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:gabriel.ResultWrapper.StringValue.value)
  return _internal_mutable_value();
}
inline const std::string& ResultWrapper_StringValue::_internal_value() const {
  return value_.Get();
}
inline void ResultWrapper_StringValue::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultWrapper_StringValue::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gabriel.ResultWrapper.StringValue.value)
}
inline void ResultWrapper_StringValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gabriel.ResultWrapper.StringValue.value)
}
inline void ResultWrapper_StringValue::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gabriel.ResultWrapper.StringValue.value)
}
inline std::string* ResultWrapper_StringValue::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultWrapper_StringValue::release_value() {
  // @@protoc_insertion_point(field_release:gabriel.ResultWrapper.StringValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultWrapper_StringValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gabriel.ResultWrapper.StringValue.value)
}
inline std::string* ResultWrapper_StringValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gabriel.ResultWrapper.StringValue.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResultWrapper_StringValue::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gabriel.ResultWrapper.StringValue.value)
}

// -------------------------------------------------------------------

// ResultWrapper

// .gabriel.ResultWrapper.Status status = 1;
inline void ResultWrapper::clear_status() {
  status_ = 0;
}
inline ::gabriel::ResultWrapper_Status ResultWrapper::_internal_status() const {
  return static_cast< ::gabriel::ResultWrapper_Status >(status_);
}
inline ::gabriel::ResultWrapper_Status ResultWrapper::status() const {
  // @@protoc_insertion_point(field_get:gabriel.ResultWrapper.status)
  return _internal_status();
}
inline void ResultWrapper::_internal_set_status(::gabriel::ResultWrapper_Status value) {
  
  status_ = value;
}
inline void ResultWrapper::set_status(::gabriel::ResultWrapper_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:gabriel.ResultWrapper.status)
}

// repeated .gabriel.ResultWrapper.Result results = 2;
inline int ResultWrapper::_internal_results_size() const {
  return results_.size();
}
inline int ResultWrapper::results_size() const {
  return _internal_results_size();
}
inline void ResultWrapper::clear_results() {
  results_.Clear();
}
inline ::gabriel::ResultWrapper_Result* ResultWrapper::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:gabriel.ResultWrapper.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gabriel::ResultWrapper_Result >*
ResultWrapper::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:gabriel.ResultWrapper.results)
  return &results_;
}
inline const ::gabriel::ResultWrapper_Result& ResultWrapper::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::gabriel::ResultWrapper_Result& ResultWrapper::results(int index) const {
  // @@protoc_insertion_point(field_get:gabriel.ResultWrapper.results)
  return _internal_results(index);
}
inline ::gabriel::ResultWrapper_Result* ResultWrapper::_internal_add_results() {
  return results_.Add();
}
inline ::gabriel::ResultWrapper_Result* ResultWrapper::add_results() {
  // @@protoc_insertion_point(field_add:gabriel.ResultWrapper.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gabriel::ResultWrapper_Result >&
ResultWrapper::results() const {
  // @@protoc_insertion_point(field_list:gabriel.ResultWrapper.results)
  return results_;
}

// .google.protobuf.Any extras = 3;
inline bool ResultWrapper::_internal_has_extras() const {
  return this != internal_default_instance() && extras_ != nullptr;
}
inline bool ResultWrapper::has_extras() const {
  return _internal_has_extras();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ResultWrapper::_internal_extras() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = extras_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ResultWrapper::extras() const {
  // @@protoc_insertion_point(field_get:gabriel.ResultWrapper.extras)
  return _internal_extras();
}
inline void ResultWrapper::unsafe_arena_set_allocated_extras(
    PROTOBUF_NAMESPACE_ID::Any* extras) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extras_);
  }
  extras_ = extras;
  if (extras) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gabriel.ResultWrapper.extras)
}
inline PROTOBUF_NAMESPACE_ID::Any* ResultWrapper::release_extras() {
  auto temp = unsafe_arena_release_extras();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ResultWrapper::unsafe_arena_release_extras() {
  // @@protoc_insertion_point(field_release:gabriel.ResultWrapper.extras)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = extras_;
  extras_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ResultWrapper::_internal_mutable_extras() {
  
  if (extras_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    extras_ = p;
  }
  return extras_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ResultWrapper::mutable_extras() {
  // @@protoc_insertion_point(field_mutable:gabriel.ResultWrapper.extras)
  return _internal_mutable_extras();
}
inline void ResultWrapper::set_allocated_extras(PROTOBUF_NAMESPACE_ID::Any* extras) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extras_);
  }
  if (extras) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extras)->GetArena();
    if (message_arena != submessage_arena) {
      extras = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extras, submessage_arena);
    }
    
  } else {
    
  }
  extras_ = extras;
  // @@protoc_insertion_point(field_set_allocated:gabriel.ResultWrapper.extras)
}

// .gabriel.ResultWrapper.StringValue result_producer_name = 4;
inline bool ResultWrapper::_internal_has_result_producer_name() const {
  return this != internal_default_instance() && result_producer_name_ != nullptr;
}
inline bool ResultWrapper::has_result_producer_name() const {
  return _internal_has_result_producer_name();
}
inline void ResultWrapper::clear_result_producer_name() {
  if (GetArena() == nullptr && result_producer_name_ != nullptr) {
    delete result_producer_name_;
  }
  result_producer_name_ = nullptr;
}
inline const ::gabriel::ResultWrapper_StringValue& ResultWrapper::_internal_result_producer_name() const {
  const ::gabriel::ResultWrapper_StringValue* p = result_producer_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gabriel::ResultWrapper_StringValue*>(
      &::gabriel::_ResultWrapper_StringValue_default_instance_);
}
inline const ::gabriel::ResultWrapper_StringValue& ResultWrapper::result_producer_name() const {
  // @@protoc_insertion_point(field_get:gabriel.ResultWrapper.result_producer_name)
  return _internal_result_producer_name();
}
inline void ResultWrapper::unsafe_arena_set_allocated_result_producer_name(
    ::gabriel::ResultWrapper_StringValue* result_producer_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_producer_name_);
  }
  result_producer_name_ = result_producer_name;
  if (result_producer_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gabriel.ResultWrapper.result_producer_name)
}
inline ::gabriel::ResultWrapper_StringValue* ResultWrapper::release_result_producer_name() {
  auto temp = unsafe_arena_release_result_producer_name();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gabriel::ResultWrapper_StringValue* ResultWrapper::unsafe_arena_release_result_producer_name() {
  // @@protoc_insertion_point(field_release:gabriel.ResultWrapper.result_producer_name)
  
  ::gabriel::ResultWrapper_StringValue* temp = result_producer_name_;
  result_producer_name_ = nullptr;
  return temp;
}
inline ::gabriel::ResultWrapper_StringValue* ResultWrapper::_internal_mutable_result_producer_name() {
  
  if (result_producer_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::gabriel::ResultWrapper_StringValue>(GetArena());
    result_producer_name_ = p;
  }
  return result_producer_name_;
}
inline ::gabriel::ResultWrapper_StringValue* ResultWrapper::mutable_result_producer_name() {
  // @@protoc_insertion_point(field_mutable:gabriel.ResultWrapper.result_producer_name)
  return _internal_mutable_result_producer_name();
}
inline void ResultWrapper::set_allocated_result_producer_name(::gabriel::ResultWrapper_StringValue* result_producer_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_producer_name_;
  }
  if (result_producer_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result_producer_name);
    if (message_arena != submessage_arena) {
      result_producer_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_producer_name, submessage_arena);
    }
    
  } else {
    
  }
  result_producer_name_ = result_producer_name;
  // @@protoc_insertion_point(field_set_allocated:gabriel.ResultWrapper.result_producer_name)
}

// -------------------------------------------------------------------

// ToClient_Welcome

// repeated string sources_consumed = 1;
inline int ToClient_Welcome::_internal_sources_consumed_size() const {
  return sources_consumed_.size();
}
inline int ToClient_Welcome::sources_consumed_size() const {
  return _internal_sources_consumed_size();
}
inline void ToClient_Welcome::clear_sources_consumed() {
  sources_consumed_.Clear();
}
inline std::string* ToClient_Welcome::add_sources_consumed() {
  // @@protoc_insertion_point(field_add_mutable:gabriel.ToClient.Welcome.sources_consumed)
  return _internal_add_sources_consumed();
}
inline const std::string& ToClient_Welcome::_internal_sources_consumed(int index) const {
  return sources_consumed_.Get(index);
}
inline const std::string& ToClient_Welcome::sources_consumed(int index) const {
  // @@protoc_insertion_point(field_get:gabriel.ToClient.Welcome.sources_consumed)
  return _internal_sources_consumed(index);
}
inline std::string* ToClient_Welcome::mutable_sources_consumed(int index) {
  // @@protoc_insertion_point(field_mutable:gabriel.ToClient.Welcome.sources_consumed)
  return sources_consumed_.Mutable(index);
}
inline void ToClient_Welcome::set_sources_consumed(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gabriel.ToClient.Welcome.sources_consumed)
  sources_consumed_.Mutable(index)->assign(value);
}
inline void ToClient_Welcome::set_sources_consumed(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gabriel.ToClient.Welcome.sources_consumed)
  sources_consumed_.Mutable(index)->assign(std::move(value));
}
inline void ToClient_Welcome::set_sources_consumed(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sources_consumed_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gabriel.ToClient.Welcome.sources_consumed)
}
inline void ToClient_Welcome::set_sources_consumed(int index, const char* value, size_t size) {
  sources_consumed_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gabriel.ToClient.Welcome.sources_consumed)
}
inline std::string* ToClient_Welcome::_internal_add_sources_consumed() {
  return sources_consumed_.Add();
}
inline void ToClient_Welcome::add_sources_consumed(const std::string& value) {
  sources_consumed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gabriel.ToClient.Welcome.sources_consumed)
}
inline void ToClient_Welcome::add_sources_consumed(std::string&& value) {
  sources_consumed_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gabriel.ToClient.Welcome.sources_consumed)
}
inline void ToClient_Welcome::add_sources_consumed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sources_consumed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gabriel.ToClient.Welcome.sources_consumed)
}
inline void ToClient_Welcome::add_sources_consumed(const char* value, size_t size) {
  sources_consumed_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gabriel.ToClient.Welcome.sources_consumed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ToClient_Welcome::sources_consumed() const {
  // @@protoc_insertion_point(field_list:gabriel.ToClient.Welcome.sources_consumed)
  return sources_consumed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ToClient_Welcome::mutable_sources_consumed() {
  // @@protoc_insertion_point(field_mutable_list:gabriel.ToClient.Welcome.sources_consumed)
  return &sources_consumed_;
}

// int32 num_tokens_per_source = 2;
inline void ToClient_Welcome::clear_num_tokens_per_source() {
  num_tokens_per_source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToClient_Welcome::_internal_num_tokens_per_source() const {
  return num_tokens_per_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToClient_Welcome::num_tokens_per_source() const {
  // @@protoc_insertion_point(field_get:gabriel.ToClient.Welcome.num_tokens_per_source)
  return _internal_num_tokens_per_source();
}
inline void ToClient_Welcome::_internal_set_num_tokens_per_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_tokens_per_source_ = value;
}
inline void ToClient_Welcome::set_num_tokens_per_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_tokens_per_source(value);
  // @@protoc_insertion_point(field_set:gabriel.ToClient.Welcome.num_tokens_per_source)
}

// -------------------------------------------------------------------

// ToClient_Response

// string source_name = 1;
inline void ToClient_Response::clear_source_name() {
  source_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ToClient_Response::source_name() const {
  // @@protoc_insertion_point(field_get:gabriel.ToClient.Response.source_name)
  return _internal_source_name();
}
inline void ToClient_Response::set_source_name(const std::string& value) {
  _internal_set_source_name(value);
  // @@protoc_insertion_point(field_set:gabriel.ToClient.Response.source_name)
}
inline std::string* ToClient_Response::mutable_source_name() {
  // @@protoc_insertion_point(field_mutable:gabriel.ToClient.Response.source_name)
  return _internal_mutable_source_name();
}
inline const std::string& ToClient_Response::_internal_source_name() const {
  return source_name_.Get();
}
inline void ToClient_Response::_internal_set_source_name(const std::string& value) {
  
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ToClient_Response::set_source_name(std::string&& value) {
  
  source_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gabriel.ToClient.Response.source_name)
}
inline void ToClient_Response::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gabriel.ToClient.Response.source_name)
}
inline void ToClient_Response::set_source_name(const char* value,
    size_t size) {
  
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gabriel.ToClient.Response.source_name)
}
inline std::string* ToClient_Response::_internal_mutable_source_name() {
  
  return source_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ToClient_Response::release_source_name() {
  // @@protoc_insertion_point(field_release:gabriel.ToClient.Response.source_name)
  return source_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ToClient_Response::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    
  } else {
    
  }
  source_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gabriel.ToClient.Response.source_name)
}
inline std::string* ToClient_Response::unsafe_arena_release_source_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gabriel.ToClient.Response.source_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ToClient_Response::unsafe_arena_set_allocated_source_name(
    std::string* source_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_name != nullptr) {
    
  } else {
    
  }
  source_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gabriel.ToClient.Response.source_name)
}

// int64 frame_id = 2;
inline void ToClient_Response::clear_frame_id() {
  frame_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ToClient_Response::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ToClient_Response::frame_id() const {
  // @@protoc_insertion_point(field_get:gabriel.ToClient.Response.frame_id)
  return _internal_frame_id();
}
inline void ToClient_Response::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frame_id_ = value;
}
inline void ToClient_Response::set_frame_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:gabriel.ToClient.Response.frame_id)
}

// bool return_token = 3;
inline void ToClient_Response::clear_return_token() {
  return_token_ = false;
}
inline bool ToClient_Response::_internal_return_token() const {
  return return_token_;
}
inline bool ToClient_Response::return_token() const {
  // @@protoc_insertion_point(field_get:gabriel.ToClient.Response.return_token)
  return _internal_return_token();
}
inline void ToClient_Response::_internal_set_return_token(bool value) {
  
  return_token_ = value;
}
inline void ToClient_Response::set_return_token(bool value) {
  _internal_set_return_token(value);
  // @@protoc_insertion_point(field_set:gabriel.ToClient.Response.return_token)
}

// .gabriel.ResultWrapper result_wrapper = 4;
inline bool ToClient_Response::_internal_has_result_wrapper() const {
  return this != internal_default_instance() && result_wrapper_ != nullptr;
}
inline bool ToClient_Response::has_result_wrapper() const {
  return _internal_has_result_wrapper();
}
inline void ToClient_Response::clear_result_wrapper() {
  if (GetArena() == nullptr && result_wrapper_ != nullptr) {
    delete result_wrapper_;
  }
  result_wrapper_ = nullptr;
}
inline const ::gabriel::ResultWrapper& ToClient_Response::_internal_result_wrapper() const {
  const ::gabriel::ResultWrapper* p = result_wrapper_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gabriel::ResultWrapper*>(
      &::gabriel::_ResultWrapper_default_instance_);
}
inline const ::gabriel::ResultWrapper& ToClient_Response::result_wrapper() const {
  // @@protoc_insertion_point(field_get:gabriel.ToClient.Response.result_wrapper)
  return _internal_result_wrapper();
}
inline void ToClient_Response::unsafe_arena_set_allocated_result_wrapper(
    ::gabriel::ResultWrapper* result_wrapper) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_wrapper_);
  }
  result_wrapper_ = result_wrapper;
  if (result_wrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gabriel.ToClient.Response.result_wrapper)
}
inline ::gabriel::ResultWrapper* ToClient_Response::release_result_wrapper() {
  auto temp = unsafe_arena_release_result_wrapper();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gabriel::ResultWrapper* ToClient_Response::unsafe_arena_release_result_wrapper() {
  // @@protoc_insertion_point(field_release:gabriel.ToClient.Response.result_wrapper)
  
  ::gabriel::ResultWrapper* temp = result_wrapper_;
  result_wrapper_ = nullptr;
  return temp;
}
inline ::gabriel::ResultWrapper* ToClient_Response::_internal_mutable_result_wrapper() {
  
  if (result_wrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::gabriel::ResultWrapper>(GetArena());
    result_wrapper_ = p;
  }
  return result_wrapper_;
}
inline ::gabriel::ResultWrapper* ToClient_Response::mutable_result_wrapper() {
  // @@protoc_insertion_point(field_mutable:gabriel.ToClient.Response.result_wrapper)
  return _internal_mutable_result_wrapper();
}
inline void ToClient_Response::set_allocated_result_wrapper(::gabriel::ResultWrapper* result_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_wrapper_;
  }
  if (result_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result_wrapper);
    if (message_arena != submessage_arena) {
      result_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_wrapper, submessage_arena);
    }
    
  } else {
    
  }
  result_wrapper_ = result_wrapper;
  // @@protoc_insertion_point(field_set_allocated:gabriel.ToClient.Response.result_wrapper)
}

// -------------------------------------------------------------------

// ToClient

// .gabriel.ToClient.Welcome welcome = 1;
inline bool ToClient::_internal_has_welcome() const {
  return welcome_or_response_case() == kWelcome;
}
inline bool ToClient::has_welcome() const {
  return _internal_has_welcome();
}
inline void ToClient::set_has_welcome() {
  _oneof_case_[0] = kWelcome;
}
inline void ToClient::clear_welcome() {
  if (_internal_has_welcome()) {
    if (GetArena() == nullptr) {
      delete welcome_or_response_.welcome_;
    }
    clear_has_welcome_or_response();
  }
}
inline ::gabriel::ToClient_Welcome* ToClient::release_welcome() {
  // @@protoc_insertion_point(field_release:gabriel.ToClient.welcome)
  if (_internal_has_welcome()) {
    clear_has_welcome_or_response();
      ::gabriel::ToClient_Welcome* temp = welcome_or_response_.welcome_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    welcome_or_response_.welcome_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gabriel::ToClient_Welcome& ToClient::_internal_welcome() const {
  return _internal_has_welcome()
      ? *welcome_or_response_.welcome_
      : *reinterpret_cast< ::gabriel::ToClient_Welcome*>(&::gabriel::_ToClient_Welcome_default_instance_);
}
inline const ::gabriel::ToClient_Welcome& ToClient::welcome() const {
  // @@protoc_insertion_point(field_get:gabriel.ToClient.welcome)
  return _internal_welcome();
}
inline ::gabriel::ToClient_Welcome* ToClient::unsafe_arena_release_welcome() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gabriel.ToClient.welcome)
  if (_internal_has_welcome()) {
    clear_has_welcome_or_response();
    ::gabriel::ToClient_Welcome* temp = welcome_or_response_.welcome_;
    welcome_or_response_.welcome_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToClient::unsafe_arena_set_allocated_welcome(::gabriel::ToClient_Welcome* welcome) {
  clear_welcome_or_response();
  if (welcome) {
    set_has_welcome();
    welcome_or_response_.welcome_ = welcome;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gabriel.ToClient.welcome)
}
inline ::gabriel::ToClient_Welcome* ToClient::_internal_mutable_welcome() {
  if (!_internal_has_welcome()) {
    clear_welcome_or_response();
    set_has_welcome();
    welcome_or_response_.welcome_ = CreateMaybeMessage< ::gabriel::ToClient_Welcome >(GetArena());
  }
  return welcome_or_response_.welcome_;
}
inline ::gabriel::ToClient_Welcome* ToClient::mutable_welcome() {
  // @@protoc_insertion_point(field_mutable:gabriel.ToClient.welcome)
  return _internal_mutable_welcome();
}

// .gabriel.ToClient.Response response = 2;
inline bool ToClient::_internal_has_response() const {
  return welcome_or_response_case() == kResponse;
}
inline bool ToClient::has_response() const {
  return _internal_has_response();
}
inline void ToClient::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline void ToClient::clear_response() {
  if (_internal_has_response()) {
    if (GetArena() == nullptr) {
      delete welcome_or_response_.response_;
    }
    clear_has_welcome_or_response();
  }
}
inline ::gabriel::ToClient_Response* ToClient::release_response() {
  // @@protoc_insertion_point(field_release:gabriel.ToClient.response)
  if (_internal_has_response()) {
    clear_has_welcome_or_response();
      ::gabriel::ToClient_Response* temp = welcome_or_response_.response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    welcome_or_response_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gabriel::ToClient_Response& ToClient::_internal_response() const {
  return _internal_has_response()
      ? *welcome_or_response_.response_
      : *reinterpret_cast< ::gabriel::ToClient_Response*>(&::gabriel::_ToClient_Response_default_instance_);
}
inline const ::gabriel::ToClient_Response& ToClient::response() const {
  // @@protoc_insertion_point(field_get:gabriel.ToClient.response)
  return _internal_response();
}
inline ::gabriel::ToClient_Response* ToClient::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gabriel.ToClient.response)
  if (_internal_has_response()) {
    clear_has_welcome_or_response();
    ::gabriel::ToClient_Response* temp = welcome_or_response_.response_;
    welcome_or_response_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToClient::unsafe_arena_set_allocated_response(::gabriel::ToClient_Response* response) {
  clear_welcome_or_response();
  if (response) {
    set_has_response();
    welcome_or_response_.response_ = response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gabriel.ToClient.response)
}
inline ::gabriel::ToClient_Response* ToClient::_internal_mutable_response() {
  if (!_internal_has_response()) {
    clear_welcome_or_response();
    set_has_response();
    welcome_or_response_.response_ = CreateMaybeMessage< ::gabriel::ToClient_Response >(GetArena());
  }
  return welcome_or_response_.response_;
}
inline ::gabriel::ToClient_Response* ToClient::mutable_response() {
  // @@protoc_insertion_point(field_mutable:gabriel.ToClient.response)
  return _internal_mutable_response();
}

inline bool ToClient::has_welcome_or_response() const {
  return welcome_or_response_case() != WELCOME_OR_RESPONSE_NOT_SET;
}
inline void ToClient::clear_has_welcome_or_response() {
  _oneof_case_[0] = WELCOME_OR_RESPONSE_NOT_SET;
}
inline ToClient::WelcomeOrResponseCase ToClient::welcome_or_response_case() const {
  return ToClient::WelcomeOrResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FromStandaloneEngine_Welcome

// string source_name = 1;
inline void FromStandaloneEngine_Welcome::clear_source_name() {
  source_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FromStandaloneEngine_Welcome::source_name() const {
  // @@protoc_insertion_point(field_get:gabriel.FromStandaloneEngine.Welcome.source_name)
  return _internal_source_name();
}
inline void FromStandaloneEngine_Welcome::set_source_name(const std::string& value) {
  _internal_set_source_name(value);
  // @@protoc_insertion_point(field_set:gabriel.FromStandaloneEngine.Welcome.source_name)
}
inline std::string* FromStandaloneEngine_Welcome::mutable_source_name() {
  // @@protoc_insertion_point(field_mutable:gabriel.FromStandaloneEngine.Welcome.source_name)
  return _internal_mutable_source_name();
}
inline const std::string& FromStandaloneEngine_Welcome::_internal_source_name() const {
  return source_name_.Get();
}
inline void FromStandaloneEngine_Welcome::_internal_set_source_name(const std::string& value) {
  
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FromStandaloneEngine_Welcome::set_source_name(std::string&& value) {
  
  source_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gabriel.FromStandaloneEngine.Welcome.source_name)
}
inline void FromStandaloneEngine_Welcome::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gabriel.FromStandaloneEngine.Welcome.source_name)
}
inline void FromStandaloneEngine_Welcome::set_source_name(const char* value,
    size_t size) {
  
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gabriel.FromStandaloneEngine.Welcome.source_name)
}
inline std::string* FromStandaloneEngine_Welcome::_internal_mutable_source_name() {
  
  return source_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FromStandaloneEngine_Welcome::release_source_name() {
  // @@protoc_insertion_point(field_release:gabriel.FromStandaloneEngine.Welcome.source_name)
  return source_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FromStandaloneEngine_Welcome::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    
  } else {
    
  }
  source_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gabriel.FromStandaloneEngine.Welcome.source_name)
}
inline std::string* FromStandaloneEngine_Welcome::unsafe_arena_release_source_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gabriel.FromStandaloneEngine.Welcome.source_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FromStandaloneEngine_Welcome::unsafe_arena_set_allocated_source_name(
    std::string* source_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_name != nullptr) {
    
  } else {
    
  }
  source_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gabriel.FromStandaloneEngine.Welcome.source_name)
}

// bool all_responses_required = 2;
inline void FromStandaloneEngine_Welcome::clear_all_responses_required() {
  all_responses_required_ = false;
}
inline bool FromStandaloneEngine_Welcome::_internal_all_responses_required() const {
  return all_responses_required_;
}
inline bool FromStandaloneEngine_Welcome::all_responses_required() const {
  // @@protoc_insertion_point(field_get:gabriel.FromStandaloneEngine.Welcome.all_responses_required)
  return _internal_all_responses_required();
}
inline void FromStandaloneEngine_Welcome::_internal_set_all_responses_required(bool value) {
  
  all_responses_required_ = value;
}
inline void FromStandaloneEngine_Welcome::set_all_responses_required(bool value) {
  _internal_set_all_responses_required(value);
  // @@protoc_insertion_point(field_set:gabriel.FromStandaloneEngine.Welcome.all_responses_required)
}

// -------------------------------------------------------------------

// FromStandaloneEngine

// .gabriel.FromStandaloneEngine.Welcome welcome = 1;
inline bool FromStandaloneEngine::_internal_has_welcome() const {
  return welcome_or_result_wrapper_case() == kWelcome;
}
inline bool FromStandaloneEngine::has_welcome() const {
  return _internal_has_welcome();
}
inline void FromStandaloneEngine::set_has_welcome() {
  _oneof_case_[0] = kWelcome;
}
inline void FromStandaloneEngine::clear_welcome() {
  if (_internal_has_welcome()) {
    if (GetArena() == nullptr) {
      delete welcome_or_result_wrapper_.welcome_;
    }
    clear_has_welcome_or_result_wrapper();
  }
}
inline ::gabriel::FromStandaloneEngine_Welcome* FromStandaloneEngine::release_welcome() {
  // @@protoc_insertion_point(field_release:gabriel.FromStandaloneEngine.welcome)
  if (_internal_has_welcome()) {
    clear_has_welcome_or_result_wrapper();
      ::gabriel::FromStandaloneEngine_Welcome* temp = welcome_or_result_wrapper_.welcome_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    welcome_or_result_wrapper_.welcome_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gabriel::FromStandaloneEngine_Welcome& FromStandaloneEngine::_internal_welcome() const {
  return _internal_has_welcome()
      ? *welcome_or_result_wrapper_.welcome_
      : *reinterpret_cast< ::gabriel::FromStandaloneEngine_Welcome*>(&::gabriel::_FromStandaloneEngine_Welcome_default_instance_);
}
inline const ::gabriel::FromStandaloneEngine_Welcome& FromStandaloneEngine::welcome() const {
  // @@protoc_insertion_point(field_get:gabriel.FromStandaloneEngine.welcome)
  return _internal_welcome();
}
inline ::gabriel::FromStandaloneEngine_Welcome* FromStandaloneEngine::unsafe_arena_release_welcome() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gabriel.FromStandaloneEngine.welcome)
  if (_internal_has_welcome()) {
    clear_has_welcome_or_result_wrapper();
    ::gabriel::FromStandaloneEngine_Welcome* temp = welcome_or_result_wrapper_.welcome_;
    welcome_or_result_wrapper_.welcome_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FromStandaloneEngine::unsafe_arena_set_allocated_welcome(::gabriel::FromStandaloneEngine_Welcome* welcome) {
  clear_welcome_or_result_wrapper();
  if (welcome) {
    set_has_welcome();
    welcome_or_result_wrapper_.welcome_ = welcome;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gabriel.FromStandaloneEngine.welcome)
}
inline ::gabriel::FromStandaloneEngine_Welcome* FromStandaloneEngine::_internal_mutable_welcome() {
  if (!_internal_has_welcome()) {
    clear_welcome_or_result_wrapper();
    set_has_welcome();
    welcome_or_result_wrapper_.welcome_ = CreateMaybeMessage< ::gabriel::FromStandaloneEngine_Welcome >(GetArena());
  }
  return welcome_or_result_wrapper_.welcome_;
}
inline ::gabriel::FromStandaloneEngine_Welcome* FromStandaloneEngine::mutable_welcome() {
  // @@protoc_insertion_point(field_mutable:gabriel.FromStandaloneEngine.welcome)
  return _internal_mutable_welcome();
}

// .gabriel.ResultWrapper result_wrapper = 2;
inline bool FromStandaloneEngine::_internal_has_result_wrapper() const {
  return welcome_or_result_wrapper_case() == kResultWrapper;
}
inline bool FromStandaloneEngine::has_result_wrapper() const {
  return _internal_has_result_wrapper();
}
inline void FromStandaloneEngine::set_has_result_wrapper() {
  _oneof_case_[0] = kResultWrapper;
}
inline void FromStandaloneEngine::clear_result_wrapper() {
  if (_internal_has_result_wrapper()) {
    if (GetArena() == nullptr) {
      delete welcome_or_result_wrapper_.result_wrapper_;
    }
    clear_has_welcome_or_result_wrapper();
  }
}
inline ::gabriel::ResultWrapper* FromStandaloneEngine::release_result_wrapper() {
  // @@protoc_insertion_point(field_release:gabriel.FromStandaloneEngine.result_wrapper)
  if (_internal_has_result_wrapper()) {
    clear_has_welcome_or_result_wrapper();
      ::gabriel::ResultWrapper* temp = welcome_or_result_wrapper_.result_wrapper_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    welcome_or_result_wrapper_.result_wrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gabriel::ResultWrapper& FromStandaloneEngine::_internal_result_wrapper() const {
  return _internal_has_result_wrapper()
      ? *welcome_or_result_wrapper_.result_wrapper_
      : *reinterpret_cast< ::gabriel::ResultWrapper*>(&::gabriel::_ResultWrapper_default_instance_);
}
inline const ::gabriel::ResultWrapper& FromStandaloneEngine::result_wrapper() const {
  // @@protoc_insertion_point(field_get:gabriel.FromStandaloneEngine.result_wrapper)
  return _internal_result_wrapper();
}
inline ::gabriel::ResultWrapper* FromStandaloneEngine::unsafe_arena_release_result_wrapper() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gabriel.FromStandaloneEngine.result_wrapper)
  if (_internal_has_result_wrapper()) {
    clear_has_welcome_or_result_wrapper();
    ::gabriel::ResultWrapper* temp = welcome_or_result_wrapper_.result_wrapper_;
    welcome_or_result_wrapper_.result_wrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FromStandaloneEngine::unsafe_arena_set_allocated_result_wrapper(::gabriel::ResultWrapper* result_wrapper) {
  clear_welcome_or_result_wrapper();
  if (result_wrapper) {
    set_has_result_wrapper();
    welcome_or_result_wrapper_.result_wrapper_ = result_wrapper;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gabriel.FromStandaloneEngine.result_wrapper)
}
inline ::gabriel::ResultWrapper* FromStandaloneEngine::_internal_mutable_result_wrapper() {
  if (!_internal_has_result_wrapper()) {
    clear_welcome_or_result_wrapper();
    set_has_result_wrapper();
    welcome_or_result_wrapper_.result_wrapper_ = CreateMaybeMessage< ::gabriel::ResultWrapper >(GetArena());
  }
  return welcome_or_result_wrapper_.result_wrapper_;
}
inline ::gabriel::ResultWrapper* FromStandaloneEngine::mutable_result_wrapper() {
  // @@protoc_insertion_point(field_mutable:gabriel.FromStandaloneEngine.result_wrapper)
  return _internal_mutable_result_wrapper();
}

inline bool FromStandaloneEngine::has_welcome_or_result_wrapper() const {
  return welcome_or_result_wrapper_case() != WELCOME_OR_RESULT_WRAPPER_NOT_SET;
}
inline void FromStandaloneEngine::clear_has_welcome_or_result_wrapper() {
  _oneof_case_[0] = WELCOME_OR_RESULT_WRAPPER_NOT_SET;
}
inline FromStandaloneEngine::WelcomeOrResultWrapperCase FromStandaloneEngine::welcome_or_result_wrapper_case() const {
  return FromStandaloneEngine::WelcomeOrResultWrapperCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gabriel

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gabriel::ResultWrapper_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gabriel::ResultWrapper_Status>() {
  return ::gabriel::ResultWrapper_Status_descriptor();
}
template <> struct is_proto_enum< ::gabriel::PayloadType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gabriel::PayloadType>() {
  return ::gabriel::PayloadType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gabriel_2eproto
